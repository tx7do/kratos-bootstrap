// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: conf/v1/kratos_conf_server.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 服务器
type Server struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rest          *Server_REST           `protobuf:"bytes,1,opt,name=rest,proto3,oneof" json:"rest,omitempty"`            // REST服务
	Grpc          *Server_GRPC           `protobuf:"bytes,2,opt,name=grpc,proto3,oneof" json:"grpc,omitempty"`            // gRPC服务
	Graphql       *Server_GraphQL        `protobuf:"bytes,3,opt,name=graphql,proto3,oneof" json:"graphql,omitempty"`      // GraphQL服务
	Thrift        *Server_Thrift         `protobuf:"bytes,4,opt,name=thrift,proto3,oneof" json:"thrift,omitempty"`        // Thrift服务
	Keepalive     *Server_KeepAlive      `protobuf:"bytes,5,opt,name=keepalive,proto3,oneof" json:"keepalive,omitempty"`  // 保活服务
	Mqtt          *Server_Mqtt           `protobuf:"bytes,10,opt,name=mqtt,proto3,oneof" json:"mqtt,omitempty"`           // MQTT服务
	Kafka         *Server_Kafka          `protobuf:"bytes,11,opt,name=kafka,proto3,oneof" json:"kafka,omitempty"`         // Kafka服务
	Rabbitmq      *Server_RabbitMQ       `protobuf:"bytes,12,opt,name=rabbitmq,proto3,oneof" json:"rabbitmq,omitempty"`   // RabbitMQ服务
	Activemq      *Server_ActiveMQ       `protobuf:"bytes,13,opt,name=activemq,proto3,oneof" json:"activemq,omitempty"`   // ActiveMQ
	Nats          *Server_NATS           `protobuf:"bytes,14,opt,name=nats,proto3,oneof" json:"nats,omitempty"`           // NATS
	Nsq           *Server_NSQ            `protobuf:"bytes,15,opt,name=nsq,proto3,oneof" json:"nsq,omitempty"`             // NATS
	Pulsar        *Server_Pulsar         `protobuf:"bytes,16,opt,name=pulsar,proto3,oneof" json:"pulsar,omitempty"`       // Pulsar
	Redis         *Server_Redis          `protobuf:"bytes,17,opt,name=redis,proto3,oneof" json:"redis,omitempty"`         // Redis
	Rocketmq      *Server_RocketMQ       `protobuf:"bytes,18,opt,name=rocketmq,proto3,oneof" json:"rocketmq,omitempty"`   // RocketMQ
	Websocket     *Server_Websocket      `protobuf:"bytes,20,opt,name=websocket,proto3,oneof" json:"websocket,omitempty"` // Websocket服务
	Sse           *Server_SSE            `protobuf:"bytes,21,opt,name=sse,proto3,oneof" json:"sse,omitempty"`             // SSE服务
	Socketio      *Server_SocketIO       `protobuf:"bytes,22,opt,name=socketio,proto3,oneof" json:"socketio,omitempty"`   // SocketIO服务
	Signalr       *Server_SignalR        `protobuf:"bytes,23,opt,name=signalr,proto3,oneof" json:"signalr,omitempty"`     // SignalR服务
	Asynq         *Server_Asynq          `protobuf:"bytes,30,opt,name=asynq,proto3,oneof" json:"asynq,omitempty"`         // Asynq服务
	Machinery     *Server_Machinery      `protobuf:"bytes,31,opt,name=machinery,proto3,oneof" json:"machinery,omitempty"` // Machinery服务
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server) Reset() {
	*x = Server{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0}
}

func (x *Server) GetRest() *Server_REST {
	if x != nil {
		return x.Rest
	}
	return nil
}

func (x *Server) GetGrpc() *Server_GRPC {
	if x != nil {
		return x.Grpc
	}
	return nil
}

func (x *Server) GetGraphql() *Server_GraphQL {
	if x != nil {
		return x.Graphql
	}
	return nil
}

func (x *Server) GetThrift() *Server_Thrift {
	if x != nil {
		return x.Thrift
	}
	return nil
}

func (x *Server) GetKeepalive() *Server_KeepAlive {
	if x != nil {
		return x.Keepalive
	}
	return nil
}

func (x *Server) GetMqtt() *Server_Mqtt {
	if x != nil {
		return x.Mqtt
	}
	return nil
}

func (x *Server) GetKafka() *Server_Kafka {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *Server) GetRabbitmq() *Server_RabbitMQ {
	if x != nil {
		return x.Rabbitmq
	}
	return nil
}

func (x *Server) GetActivemq() *Server_ActiveMQ {
	if x != nil {
		return x.Activemq
	}
	return nil
}

func (x *Server) GetNats() *Server_NATS {
	if x != nil {
		return x.Nats
	}
	return nil
}

func (x *Server) GetNsq() *Server_NSQ {
	if x != nil {
		return x.Nsq
	}
	return nil
}

func (x *Server) GetPulsar() *Server_Pulsar {
	if x != nil {
		return x.Pulsar
	}
	return nil
}

func (x *Server) GetRedis() *Server_Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Server) GetRocketmq() *Server_RocketMQ {
	if x != nil {
		return x.Rocketmq
	}
	return nil
}

func (x *Server) GetWebsocket() *Server_Websocket {
	if x != nil {
		return x.Websocket
	}
	return nil
}

func (x *Server) GetSse() *Server_SSE {
	if x != nil {
		return x.Sse
	}
	return nil
}

func (x *Server) GetSocketio() *Server_SocketIO {
	if x != nil {
		return x.Socketio
	}
	return nil
}

func (x *Server) GetSignalr() *Server_SignalR {
	if x != nil {
		return x.Signalr
	}
	return nil
}

func (x *Server) GetAsynq() *Server_Asynq {
	if x != nil {
		return x.Asynq
	}
	return nil
}

func (x *Server) GetMachinery() *Server_Machinery {
	if x != nil {
		return x.Machinery
	}
	return nil
}

// REST
type Server_REST struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`                                    // 网络
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`                                          // 服务监听地址
	Timeout       *durationpb.Duration   `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`                                    // 超时时间
	Cors          *Server_REST_CORS      `protobuf:"bytes,10,opt,name=cors,proto3" json:"cors,omitempty"`                                         // 服务监听地址
	Middleware    *Middleware            `protobuf:"bytes,11,opt,name=middleware,proto3" json:"middleware,omitempty"`                             // 中间件
	Tls           *TLS                   `protobuf:"bytes,12,opt,name=tls,proto3" json:"tls,omitempty"`                                           // TLS配置
	EnableSwagger bool                   `protobuf:"varint,20,opt,name=enable_swagger,json=enableSwagger,proto3" json:"enable_swagger,omitempty"` // 启用SwaggerUI
	EnablePprof   bool                   `protobuf:"varint,21,opt,name=enable_pprof,json=enablePprof,proto3" json:"enable_pprof,omitempty"`       // 启用pprof
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_REST) Reset() {
	*x = Server_REST{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_REST) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_REST) ProtoMessage() {}

func (x *Server_REST) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_REST.ProtoReflect.Descriptor instead.
func (*Server_REST) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Server_REST) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_REST) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_REST) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Server_REST) GetCors() *Server_REST_CORS {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *Server_REST) GetMiddleware() *Middleware {
	if x != nil {
		return x.Middleware
	}
	return nil
}

func (x *Server_REST) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Server_REST) GetEnableSwagger() bool {
	if x != nil {
		return x.EnableSwagger
	}
	return false
}

func (x *Server_REST) GetEnablePprof() bool {
	if x != nil {
		return x.EnablePprof
	}
	return false
}

// gPRC
type Server_GRPC struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"` // 网络
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`       // 服务监听地址
	Timeout       *durationpb.Duration   `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"` // 超时时间
	Middleware    *Middleware            `protobuf:"bytes,4,opt,name=middleware,proto3" json:"middleware,omitempty"`
	Tls           *TLS                   `protobuf:"bytes,5,opt,name=tls,proto3" json:"tls,omitempty"` // TLS配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_GRPC) Reset() {
	*x = Server_GRPC{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_GRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_GRPC) ProtoMessage() {}

func (x *Server_GRPC) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_GRPC.ProtoReflect.Descriptor instead.
func (*Server_GRPC) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Server_GRPC) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_GRPC) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_GRPC) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Server_GRPC) GetMiddleware() *Middleware {
	if x != nil {
		return x.Middleware
	}
	return nil
}

func (x *Server_GRPC) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

// Websocket
type Server_Websocket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"` // 网络样式：http、https
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`       // 服务监听地址
	Path          string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`       // 路径
	Codec         string                 `protobuf:"bytes,4,opt,name=codec,proto3" json:"codec,omitempty"`     // 编解码器: json,xml,yaml...
	Timeout       *durationpb.Duration   `protobuf:"bytes,5,opt,name=timeout,proto3" json:"timeout,omitempty"` // 超时时间
	Tls           *TLS                   `protobuf:"bytes,6,opt,name=tls,proto3" json:"tls,omitempty"`         // TLS配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_Websocket) Reset() {
	*x = Server_Websocket{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_Websocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Websocket) ProtoMessage() {}

func (x *Server_Websocket) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Websocket.ProtoReflect.Descriptor instead.
func (*Server_Websocket) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Server_Websocket) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_Websocket) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_Websocket) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Server_Websocket) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Server_Websocket) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Server_Websocket) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

// MQTT
type Server_Mqtt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`                              // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`                                    // 编解码器: json,xml,yaml...
	Tls           *TLS                   `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`                                        // TLS配置
	Username      string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`                              // 用户名
	Password      string                 `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`                              // 密码
	ClientId      string                 `protobuf:"bytes,6,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`              // 客户端ID
	CleanSession  bool                   `protobuf:"varint,7,opt,name=clean_session,json=cleanSession,proto3" json:"clean_session,omitempty"` // 清除会话
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_Mqtt) Reset() {
	*x = Server_Mqtt{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_Mqtt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Mqtt) ProtoMessage() {}

func (x *Server_Mqtt) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Mqtt.ProtoReflect.Descriptor instead.
func (*Server_Mqtt) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Server_Mqtt) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Server_Mqtt) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Server_Mqtt) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Server_Mqtt) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Server_Mqtt) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Server_Mqtt) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Server_Mqtt) GetCleanSession() bool {
	if x != nil {
		return x.CleanSession
	}
	return false
}

// Kafka
type Server_Kafka struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoints     []string               `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"` // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`         // 编解码器: json,xml,yaml...
	Tls           *TLS                   `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`             // TLS配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_Kafka) Reset() {
	*x = Server_Kafka{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_Kafka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Kafka) ProtoMessage() {}

func (x *Server_Kafka) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Kafka.ProtoReflect.Descriptor instead.
func (*Server_Kafka) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Server_Kafka) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Server_Kafka) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Server_Kafka) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

// RabbitMQ
type Server_RabbitMQ struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoints     []string               `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"` // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`         // 编解码器: json,xml,yaml...
	Tls           *TLS                   `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`             // TLS配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_RabbitMQ) Reset() {
	*x = Server_RabbitMQ{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_RabbitMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_RabbitMQ) ProtoMessage() {}

func (x *Server_RabbitMQ) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_RabbitMQ.ProtoReflect.Descriptor instead.
func (*Server_RabbitMQ) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Server_RabbitMQ) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Server_RabbitMQ) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Server_RabbitMQ) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Server_ActiveMQ struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // 编解码器: json,xml,yaml...
	Tls           *TLS                   `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`           // TLS配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_ActiveMQ) Reset() {
	*x = Server_ActiveMQ{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_ActiveMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_ActiveMQ) ProtoMessage() {}

func (x *Server_ActiveMQ) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_ActiveMQ.ProtoReflect.Descriptor instead.
func (*Server_ActiveMQ) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Server_ActiveMQ) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Server_ActiveMQ) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Server_ActiveMQ) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Server_NATS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // 编解码器: json,xml,yaml...
	Tls           *TLS                   `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`           // TLS配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_NATS) Reset() {
	*x = Server_NATS{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_NATS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_NATS) ProtoMessage() {}

func (x *Server_NATS) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_NATS.ProtoReflect.Descriptor instead.
func (*Server_NATS) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Server_NATS) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Server_NATS) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Server_NATS) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Server_NSQ struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // 编解码器: json,xml,yaml...
	Tls           *TLS                   `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`           // TLS配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_NSQ) Reset() {
	*x = Server_NSQ{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_NSQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_NSQ) ProtoMessage() {}

func (x *Server_NSQ) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_NSQ.ProtoReflect.Descriptor instead.
func (*Server_NSQ) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 8}
}

func (x *Server_NSQ) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Server_NSQ) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Server_NSQ) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Server_Pulsar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // 编解码器: json,xml,yaml...
	Tls           *TLS                   `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`           // TLS配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_Pulsar) Reset() {
	*x = Server_Pulsar{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_Pulsar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Pulsar) ProtoMessage() {}

func (x *Server_Pulsar) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Pulsar.ProtoReflect.Descriptor instead.
func (*Server_Pulsar) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 9}
}

func (x *Server_Pulsar) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Server_Pulsar) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Server_Pulsar) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Server_Redis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // 编解码器: json,xml,yaml...
	Tls           *TLS                   `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`           // TLS配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_Redis) Reset() {
	*x = Server_Redis{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Redis) ProtoMessage() {}

func (x *Server_Redis) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Redis.ProtoReflect.Descriptor instead.
func (*Server_Redis) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 10}
}

func (x *Server_Redis) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Server_Redis) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Server_Redis) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Server_RocketMQ struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Version          string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // 驱动版本：aliyun、v2、v5
	Codec            string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`     // 编解码器: json,xml,yaml...
	NameServers      []string               `protobuf:"bytes,3,rep,name=name_servers,json=nameServers,proto3" json:"name_servers,omitempty"`
	NameServerDomain string                 `protobuf:"bytes,4,opt,name=name_server_domain,json=nameServerDomain,proto3" json:"name_server_domain,omitempty"`
	AccessKey        string                 `protobuf:"bytes,5,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey        string                 `protobuf:"bytes,6,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SecurityToken    string                 `protobuf:"bytes,7,opt,name=security_token,json=securityToken,proto3" json:"security_token,omitempty"`
	Namespace        string                 `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	InstanceName     string                 `protobuf:"bytes,9,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	GroupName        string                 `protobuf:"bytes,10,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	Tls              *TLS                   `protobuf:"bytes,11,opt,name=tls,proto3" json:"tls,omitempty"` // TLS配置
	EnableTrace      bool                   `protobuf:"varint,100,opt,name=enable_trace,json=enableTrace,proto3" json:"enable_trace,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Server_RocketMQ) Reset() {
	*x = Server_RocketMQ{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_RocketMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_RocketMQ) ProtoMessage() {}

func (x *Server_RocketMQ) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_RocketMQ.ProtoReflect.Descriptor instead.
func (*Server_RocketMQ) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 11}
}

func (x *Server_RocketMQ) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Server_RocketMQ) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Server_RocketMQ) GetNameServers() []string {
	if x != nil {
		return x.NameServers
	}
	return nil
}

func (x *Server_RocketMQ) GetNameServerDomain() string {
	if x != nil {
		return x.NameServerDomain
	}
	return ""
}

func (x *Server_RocketMQ) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *Server_RocketMQ) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *Server_RocketMQ) GetSecurityToken() string {
	if x != nil {
		return x.SecurityToken
	}
	return ""
}

func (x *Server_RocketMQ) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Server_RocketMQ) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *Server_RocketMQ) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Server_RocketMQ) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Server_RocketMQ) GetEnableTrace() bool {
	if x != nil {
		return x.EnableTrace
	}
	return false
}

// Asynq
type Server_Asynq struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Network                  string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`                                                                           // Redis对端网络地址
	Endpoint                 string                 `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`                                                                         // Redis对端网络地址
	Password                 string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`                                                                         // Redis登录密码
	Db                       int32                  `protobuf:"varint,4,opt,name=db,proto3" json:"db,omitempty"`                                                                                    // Redis数据库索引
	Uri                      string                 `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`                                                                                   // Redis URI
	PoolSize                 int32                  `protobuf:"varint,6,opt,name=pool_size,json=poolSize,proto3" json:"pool_size,omitempty"`                                                        // Redis连接池大小
	Tls                      *TLS                   `protobuf:"bytes,7,opt,name=tls,proto3" json:"tls,omitempty"`                                                                                   // TLS配置
	Codec                    string                 `protobuf:"bytes,8,opt,name=codec,proto3" json:"codec,omitempty"`                                                                               // 编解码器: json,xml,yaml...
	Location                 string                 `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`                                                                        // 时区
	Concurrency              int32                  `protobuf:"varint,11,opt,name=concurrency,proto3" json:"concurrency,omitempty"`                                                                 // 并发数
	GroupMaxSize             int32                  `protobuf:"varint,12,opt,name=group_max_size,json=groupMaxSize,proto3" json:"group_max_size,omitempty"`                                         // 组最大大小
	Queues                   map[string]int32       `protobuf:"bytes,13,rep,name=queues,proto3" json:"queues,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 队列
	EnableGracefullyShutdown bool                   `protobuf:"varint,20,opt,name=enable_gracefully_shutdown,json=enableGracefullyShutdown,proto3" json:"enable_gracefully_shutdown,omitempty"`     // 优雅关闭
	EnableStrictPriority     bool                   `protobuf:"varint,21,opt,name=enable_strict_priority,json=enableStrictPriority,proto3" json:"enable_strict_priority,omitempty"`                 // 严格优先级
	ShutdownTimeout          *durationpb.Duration   `protobuf:"bytes,30,opt,name=shutdown_timeout,json=shutdownTimeout,proto3" json:"shutdown_timeout,omitempty"`                                   // 关闭超时时间
	DialTimeout              *durationpb.Duration   `protobuf:"bytes,31,opt,name=dial_timeout,json=dialTimeout,proto3" json:"dial_timeout,omitempty"`                                               // 拨号超时时间
	ReadTimeout              *durationpb.Duration   `protobuf:"bytes,32,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`                                               // 读取超时时间
	WriteTimeout             *durationpb.Duration   `protobuf:"bytes,33,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`                                            // 写入超时时间
	HealthCheckInterval      *durationpb.Duration   `protobuf:"bytes,34,opt,name=health_check_interval,json=healthCheckInterval,proto3" json:"health_check_interval,omitempty"`                     // 健康检查时间间隔
	DelayedTaskCheckInterval *durationpb.Duration   `protobuf:"bytes,35,opt,name=delayed_task_check_interval,json=delayedTaskCheckInterval,proto3" json:"delayed_task_check_interval,omitempty"`    // 延迟任务检查时间间隔
	GroupGracePeriod         *durationpb.Duration   `protobuf:"bytes,36,opt,name=group_grace_period,json=groupGracePeriod,proto3" json:"group_grace_period,omitempty"`                              // 组宽限期
	GroupMaxDelay            *durationpb.Duration   `protobuf:"bytes,37,opt,name=group_max_delay,json=groupMaxDelay,proto3" json:"group_max_delay,omitempty"`                                       // 组最大延迟
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Server_Asynq) Reset() {
	*x = Server_Asynq{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_Asynq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Asynq) ProtoMessage() {}

func (x *Server_Asynq) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Asynq.ProtoReflect.Descriptor instead.
func (*Server_Asynq) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 12}
}

func (x *Server_Asynq) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_Asynq) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Server_Asynq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Server_Asynq) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *Server_Asynq) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Server_Asynq) GetPoolSize() int32 {
	if x != nil {
		return x.PoolSize
	}
	return 0
}

func (x *Server_Asynq) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Server_Asynq) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Server_Asynq) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Server_Asynq) GetConcurrency() int32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *Server_Asynq) GetGroupMaxSize() int32 {
	if x != nil {
		return x.GroupMaxSize
	}
	return 0
}

func (x *Server_Asynq) GetQueues() map[string]int32 {
	if x != nil {
		return x.Queues
	}
	return nil
}

func (x *Server_Asynq) GetEnableGracefullyShutdown() bool {
	if x != nil {
		return x.EnableGracefullyShutdown
	}
	return false
}

func (x *Server_Asynq) GetEnableStrictPriority() bool {
	if x != nil {
		return x.EnableStrictPriority
	}
	return false
}

func (x *Server_Asynq) GetShutdownTimeout() *durationpb.Duration {
	if x != nil {
		return x.ShutdownTimeout
	}
	return nil
}

func (x *Server_Asynq) GetDialTimeout() *durationpb.Duration {
	if x != nil {
		return x.DialTimeout
	}
	return nil
}

func (x *Server_Asynq) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *Server_Asynq) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *Server_Asynq) GetHealthCheckInterval() *durationpb.Duration {
	if x != nil {
		return x.HealthCheckInterval
	}
	return nil
}

func (x *Server_Asynq) GetDelayedTaskCheckInterval() *durationpb.Duration {
	if x != nil {
		return x.DelayedTaskCheckInterval
	}
	return nil
}

func (x *Server_Asynq) GetGroupGracePeriod() *durationpb.Duration {
	if x != nil {
		return x.GroupGracePeriod
	}
	return nil
}

func (x *Server_Asynq) GetGroupMaxDelay() *durationpb.Duration {
	if x != nil {
		return x.GroupMaxDelay
	}
	return nil
}

// Machinery
type Server_Machinery struct {
	state               protoimpl.MessageState     `protogen:"open.v1"`
	BrokerType          string                     `protobuf:"bytes,1,opt,name=broker_type,json=brokerType,proto3" json:"broker_type,omitempty"`                              // broker类型，可以根据实际使用的存储介质，分别指定Redis、AMQP或AWS SQS；
	BrokerAddr          string                     `protobuf:"bytes,2,opt,name=broker_addr,json=brokerAddr,proto3" json:"broker_addr,omitempty"`                              // broker的地址
	BrokerDb            int32                      `protobuf:"varint,3,opt,name=broker_db,json=brokerDb,proto3" json:"broker_db,omitempty"`                                   // broker的数据库索引
	BackendType         string                     `protobuf:"bytes,10,opt,name=backend_type,json=backendType,proto3" json:"backend_type,omitempty"`                          // backend类型，可以分别指定为：redis、memcached或mongodb等；
	BackendAddr         string                     `protobuf:"bytes,11,opt,name=backend_addr,json=backendAddr,proto3" json:"backend_addr,omitempty"`                          // backend的地址
	BackendDb           int32                      `protobuf:"varint,12,opt,name=backend_db,json=backendDb,proto3" json:"backend_db,omitempty"`                               // backend的数据库索引
	LockType            string                     `protobuf:"bytes,20,opt,name=lock_type,json=lockType,proto3" json:"lock_type,omitempty"`                                   // lock类型，可以分别指定为：redis、memcached或mongodb等；
	LockAddr            string                     `protobuf:"bytes,21,opt,name=lock_addr,json=lockAddr,proto3" json:"lock_addr,omitempty"`                                   // lock的地址
	LockDb              int32                      `protobuf:"varint,22,opt,name=lock_db,json=lockDb,proto3" json:"lock_db,omitempty"`                                        // lock的数据库索引
	ConsumerTag         string                     `protobuf:"bytes,30,opt,name=consumer_tag,json=consumerTag,proto3" json:"consumer_tag,omitempty"`                          // 消费者标签
	ConsumerConcurrency int32                      `protobuf:"varint,31,opt,name=consumer_concurrency,json=consumerConcurrency,proto3" json:"consumer_concurrency,omitempty"` // 消费者并发数
	ConsumerQueue       string                     `protobuf:"bytes,32,opt,name=consumer_queue,json=consumerQueue,proto3" json:"consumer_queue,omitempty"`                    // 消费者队列
	Tls                 *TLS                       `protobuf:"bytes,50,opt,name=tls,proto3" json:"tls,omitempty"`                                                             // TLS配置
	DefaultQueue        string                     `protobuf:"bytes,51,opt,name=default_queue,json=defaultQueue,proto3" json:"default_queue,omitempty"`                       // 默认队列
	ResultsExpireIn     int32                      `protobuf:"varint,52,opt,name=results_expire_in,json=resultsExpireIn,proto3" json:"results_expire_in,omitempty"`           // 结果过期时间
	NoUnixSignals       bool                       `protobuf:"varint,53,opt,name=no_unix_signals,json=noUnixSignals,proto3" json:"no_unix_signals,omitempty"`                 // 禁用Unix信号
	Redis               *Server_Machinery_Redis    `protobuf:"bytes,100,opt,name=redis,proto3" json:"redis,omitempty"`                                                        // Redis配置
	Amqp                *Server_Machinery_AMQP     `protobuf:"bytes,101,opt,name=amqp,proto3" json:"amqp,omitempty"`                                                          // AMQP配置
	Sqs                 *Server_Machinery_SQS      `protobuf:"bytes,102,opt,name=sqs,proto3" json:"sqs,omitempty"`                                                            // SQS配置
	Gcp                 *Server_Machinery_GCP      `protobuf:"bytes,103,opt,name=gcp,proto3" json:"gcp,omitempty"`                                                            // GCP配置
	Mongodb             *Server_Machinery_MongoDB  `protobuf:"bytes,104,opt,name=mongodb,proto3" json:"mongodb,omitempty"`                                                    // MongoDB配置
	Dynamodb            *Server_Machinery_DynamoDB `protobuf:"bytes,105,opt,name=dynamodb,proto3" json:"dynamodb,omitempty"`                                                  // DynamoDB配置
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Server_Machinery) Reset() {
	*x = Server_Machinery{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_Machinery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Machinery) ProtoMessage() {}

func (x *Server_Machinery) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Machinery.ProtoReflect.Descriptor instead.
func (*Server_Machinery) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 13}
}

func (x *Server_Machinery) GetBrokerType() string {
	if x != nil {
		return x.BrokerType
	}
	return ""
}

func (x *Server_Machinery) GetBrokerAddr() string {
	if x != nil {
		return x.BrokerAddr
	}
	return ""
}

func (x *Server_Machinery) GetBrokerDb() int32 {
	if x != nil {
		return x.BrokerDb
	}
	return 0
}

func (x *Server_Machinery) GetBackendType() string {
	if x != nil {
		return x.BackendType
	}
	return ""
}

func (x *Server_Machinery) GetBackendAddr() string {
	if x != nil {
		return x.BackendAddr
	}
	return ""
}

func (x *Server_Machinery) GetBackendDb() int32 {
	if x != nil {
		return x.BackendDb
	}
	return 0
}

func (x *Server_Machinery) GetLockType() string {
	if x != nil {
		return x.LockType
	}
	return ""
}

func (x *Server_Machinery) GetLockAddr() string {
	if x != nil {
		return x.LockAddr
	}
	return ""
}

func (x *Server_Machinery) GetLockDb() int32 {
	if x != nil {
		return x.LockDb
	}
	return 0
}

func (x *Server_Machinery) GetConsumerTag() string {
	if x != nil {
		return x.ConsumerTag
	}
	return ""
}

func (x *Server_Machinery) GetConsumerConcurrency() int32 {
	if x != nil {
		return x.ConsumerConcurrency
	}
	return 0
}

func (x *Server_Machinery) GetConsumerQueue() string {
	if x != nil {
		return x.ConsumerQueue
	}
	return ""
}

func (x *Server_Machinery) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Server_Machinery) GetDefaultQueue() string {
	if x != nil {
		return x.DefaultQueue
	}
	return ""
}

func (x *Server_Machinery) GetResultsExpireIn() int32 {
	if x != nil {
		return x.ResultsExpireIn
	}
	return 0
}

func (x *Server_Machinery) GetNoUnixSignals() bool {
	if x != nil {
		return x.NoUnixSignals
	}
	return false
}

func (x *Server_Machinery) GetRedis() *Server_Machinery_Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Server_Machinery) GetAmqp() *Server_Machinery_AMQP {
	if x != nil {
		return x.Amqp
	}
	return nil
}

func (x *Server_Machinery) GetSqs() *Server_Machinery_SQS {
	if x != nil {
		return x.Sqs
	}
	return nil
}

func (x *Server_Machinery) GetGcp() *Server_Machinery_GCP {
	if x != nil {
		return x.Gcp
	}
	return nil
}

func (x *Server_Machinery) GetMongodb() *Server_Machinery_MongoDB {
	if x != nil {
		return x.Mongodb
	}
	return nil
}

func (x *Server_Machinery) GetDynamodb() *Server_Machinery_DynamoDB {
	if x != nil {
		return x.Dynamodb
	}
	return nil
}

// SSE
type Server_SSE struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`                                 // 网络
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`                                       // 服务监听地址
	Path          string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`                                       // 路径
	Codec         string                 `protobuf:"bytes,4,opt,name=codec,proto3" json:"codec,omitempty"`                                     // 编解码器
	Tls           *TLS                   `protobuf:"bytes,5,opt,name=tls,proto3" json:"tls,omitempty"`                                         // TLS配置
	Timeout       *durationpb.Duration   `protobuf:"bytes,10,opt,name=timeout,proto3" json:"timeout,omitempty"`                                // 超时时间
	EventTtl      *durationpb.Duration   `protobuf:"bytes,11,opt,name=event_ttl,json=eventTtl,proto3" json:"event_ttl,omitempty"`              //
	AutoStream    bool                   `protobuf:"varint,20,opt,name=auto_stream,json=autoStream,proto3" json:"auto_stream,omitempty"`       //
	AutoReply     bool                   `protobuf:"varint,21,opt,name=auto_reply,json=autoReply,proto3" json:"auto_reply,omitempty"`          //
	SplitData     bool                   `protobuf:"varint,22,opt,name=split_data,json=splitData,proto3" json:"split_data,omitempty"`          //
	EncodeBase64  bool                   `protobuf:"varint,23,opt,name=encode_base64,json=encodeBase64,proto3" json:"encode_base64,omitempty"` // 进行BASE64编码
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_SSE) Reset() {
	*x = Server_SSE{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_SSE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_SSE) ProtoMessage() {}

func (x *Server_SSE) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_SSE.ProtoReflect.Descriptor instead.
func (*Server_SSE) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 14}
}

func (x *Server_SSE) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_SSE) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_SSE) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Server_SSE) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Server_SSE) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Server_SSE) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Server_SSE) GetEventTtl() *durationpb.Duration {
	if x != nil {
		return x.EventTtl
	}
	return nil
}

func (x *Server_SSE) GetAutoStream() bool {
	if x != nil {
		return x.AutoStream
	}
	return false
}

func (x *Server_SSE) GetAutoReply() bool {
	if x != nil {
		return x.AutoReply
	}
	return false
}

func (x *Server_SSE) GetSplitData() bool {
	if x != nil {
		return x.SplitData
	}
	return false
}

func (x *Server_SSE) GetEncodeBase64() bool {
	if x != nil {
		return x.EncodeBase64
	}
	return false
}

// SocketIO
type Server_SocketIO struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"` // 网络
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`       // 服务监听地址
	Path          string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`       // 路径
	Codec         string                 `protobuf:"bytes,4,opt,name=codec,proto3" json:"codec,omitempty"`     // 编解码器
	Tls           *TLS                   `protobuf:"bytes,5,opt,name=tls,proto3" json:"tls,omitempty"`         // TLS配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_SocketIO) Reset() {
	*x = Server_SocketIO{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_SocketIO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_SocketIO) ProtoMessage() {}

func (x *Server_SocketIO) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_SocketIO.ProtoReflect.Descriptor instead.
func (*Server_SocketIO) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 15}
}

func (x *Server_SocketIO) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_SocketIO) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_SocketIO) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Server_SocketIO) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Server_SocketIO) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

// SignalR
type Server_SignalR struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Network              string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`                                                          // 网络
	Addr                 string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`                                                                // 服务监听地址
	Codec                string                 `protobuf:"bytes,3,opt,name=codec,proto3" json:"codec,omitempty"`                                                              // 编解码器
	Tls                  *TLS                   `protobuf:"bytes,4,opt,name=tls,proto3" json:"tls,omitempty"`                                                                  // TLS配置
	KeepAliveInterval    *durationpb.Duration   `protobuf:"bytes,10,opt,name=keep_alive_interval,json=keepAliveInterval,proto3" json:"keep_alive_interval,omitempty"`          // 超时时间
	ChanReceiveTimeout   *durationpb.Duration   `protobuf:"bytes,11,opt,name=chan_receive_timeout,json=chanReceiveTimeout,proto3" json:"chan_receive_timeout,omitempty"`       // 超时时间
	Debug                bool                   `protobuf:"varint,6,opt,name=debug,proto3" json:"debug,omitempty"`                                                             // 调试开关
	StreamBufferCapacity uint32                 `protobuf:"varint,7,opt,name=stream_buffer_capacity,json=streamBufferCapacity,proto3" json:"stream_buffer_capacity,omitempty"` //
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Server_SignalR) Reset() {
	*x = Server_SignalR{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_SignalR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_SignalR) ProtoMessage() {}

func (x *Server_SignalR) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_SignalR.ProtoReflect.Descriptor instead.
func (*Server_SignalR) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 16}
}

func (x *Server_SignalR) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_SignalR) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_SignalR) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Server_SignalR) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Server_SignalR) GetKeepAliveInterval() *durationpb.Duration {
	if x != nil {
		return x.KeepAliveInterval
	}
	return nil
}

func (x *Server_SignalR) GetChanReceiveTimeout() *durationpb.Duration {
	if x != nil {
		return x.ChanReceiveTimeout
	}
	return nil
}

func (x *Server_SignalR) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *Server_SignalR) GetStreamBufferCapacity() uint32 {
	if x != nil {
		return x.StreamBufferCapacity
	}
	return 0
}

// GraphQL
type Server_GraphQL struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"` // 网络
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`       // 服务监听地址
	Path          string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`       // 路径
	Codec         string                 `protobuf:"bytes,4,opt,name=codec,proto3" json:"codec,omitempty"`     // 编解码器
	Timeout       *durationpb.Duration   `protobuf:"bytes,5,opt,name=timeout,proto3" json:"timeout,omitempty"` // 超时时间
	StrictSlash   bool                   `protobuf:"varint,6,opt,name=strict_slash,json=strictSlash,proto3" json:"strict_slash,omitempty"`
	Tls           *TLS                   `protobuf:"bytes,7,opt,name=tls,proto3" json:"tls,omitempty"` // TLS配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_GraphQL) Reset() {
	*x = Server_GraphQL{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_GraphQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_GraphQL) ProtoMessage() {}

func (x *Server_GraphQL) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_GraphQL.ProtoReflect.Descriptor instead.
func (*Server_GraphQL) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 17}
}

func (x *Server_GraphQL) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_GraphQL) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_GraphQL) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Server_GraphQL) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Server_GraphQL) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Server_GraphQL) GetStrictSlash() bool {
	if x != nil {
		return x.StrictSlash
	}
	return false
}

func (x *Server_GraphQL) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

// Thrift
type Server_Thrift struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"` // 网络
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`       // 服务监听地址
	Protocol      string                 `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Buffered      bool                   `protobuf:"varint,4,opt,name=buffered,proto3" json:"buffered,omitempty"`
	Framed        bool                   `protobuf:"varint,5,opt,name=framed,proto3" json:"framed,omitempty"`
	BufferSize    bool                   `protobuf:"varint,6,opt,name=buffer_size,json=bufferSize,proto3" json:"buffer_size,omitempty"`
	Tls           *TLS                   `protobuf:"bytes,7,opt,name=tls,proto3" json:"tls,omitempty"` // TLS配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_Thrift) Reset() {
	*x = Server_Thrift{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_Thrift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Thrift) ProtoMessage() {}

func (x *Server_Thrift) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Thrift.ProtoReflect.Descriptor instead.
func (*Server_Thrift) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 18}
}

func (x *Server_Thrift) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_Thrift) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_Thrift) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Server_Thrift) GetBuffered() bool {
	if x != nil {
		return x.Buffered
	}
	return false
}

func (x *Server_Thrift) GetFramed() bool {
	if x != nil {
		return x.Framed
	}
	return false
}

func (x *Server_Thrift) GetBufferSize() bool {
	if x != nil {
		return x.BufferSize
	}
	return false
}

func (x *Server_Thrift) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Server_KeepAlive struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"` // 网络
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`       // 服务监听地址
	Tls           *TLS                   `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`         // TLS配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_KeepAlive) Reset() {
	*x = Server_KeepAlive{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_KeepAlive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_KeepAlive) ProtoMessage() {}

func (x *Server_KeepAlive) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_KeepAlive.ProtoReflect.Descriptor instead.
func (*Server_KeepAlive) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 19}
}

func (x *Server_KeepAlive) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_KeepAlive) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_KeepAlive) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Server_REST_CORS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Headers       []string               `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"` //
	Methods       []string               `protobuf:"bytes,2,rep,name=methods,proto3" json:"methods,omitempty"` //
	Origins       []string               `protobuf:"bytes,3,rep,name=origins,proto3" json:"origins,omitempty"` //
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_REST_CORS) Reset() {
	*x = Server_REST_CORS{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_REST_CORS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_REST_CORS) ProtoMessage() {}

func (x *Server_REST_CORS) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_REST_CORS.ProtoReflect.Descriptor instead.
func (*Server_REST_CORS) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Server_REST_CORS) GetHeaders() []string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Server_REST_CORS) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *Server_REST_CORS) GetOrigins() []string {
	if x != nil {
		return x.Origins
	}
	return nil
}

type Server_Machinery_Redis struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	MaxIdle                int32                  `protobuf:"varint,1,opt,name=max_idle,json=maxIdle,proto3" json:"max_idle,omitempty"`
	MaxActive              int32                  `protobuf:"varint,2,opt,name=max_active,json=maxActive,proto3" json:"max_active,omitempty"`
	MaxIdleTimeout         int32                  `protobuf:"varint,3,opt,name=max_idle_timeout,json=maxIdleTimeout,proto3" json:"max_idle_timeout,omitempty"`
	Wait                   bool                   `protobuf:"varint,4,opt,name=wait,proto3" json:"wait,omitempty"`
	ReadTimeout            int32                  `protobuf:"varint,5,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`
	WriteTimeout           int32                  `protobuf:"varint,6,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`
	ConnectTimeout         int32                  `protobuf:"varint,7,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	NormalTasksPollPeriod  int32                  `protobuf:"varint,8,opt,name=normal_tasks_poll_period,json=normalTasksPollPeriod,proto3" json:"normal_tasks_poll_period,omitempty"`
	DelayedTasksPollPeriod int32                  `protobuf:"varint,9,opt,name=delayed_tasks_poll_period,json=delayedTasksPollPeriod,proto3" json:"delayed_tasks_poll_period,omitempty"`
	DelayedTasksKey        string                 `protobuf:"bytes,10,opt,name=delayed_tasks_key,json=delayedTasksKey,proto3" json:"delayed_tasks_key,omitempty"`
	MasterName             string                 `protobuf:"bytes,11,opt,name=master_name,json=masterName,proto3" json:"master_name,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Server_Machinery_Redis) Reset() {
	*x = Server_Machinery_Redis{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_Machinery_Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Machinery_Redis) ProtoMessage() {}

func (x *Server_Machinery_Redis) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Machinery_Redis.ProtoReflect.Descriptor instead.
func (*Server_Machinery_Redis) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 13, 0}
}

func (x *Server_Machinery_Redis) GetMaxIdle() int32 {
	if x != nil {
		return x.MaxIdle
	}
	return 0
}

func (x *Server_Machinery_Redis) GetMaxActive() int32 {
	if x != nil {
		return x.MaxActive
	}
	return 0
}

func (x *Server_Machinery_Redis) GetMaxIdleTimeout() int32 {
	if x != nil {
		return x.MaxIdleTimeout
	}
	return 0
}

func (x *Server_Machinery_Redis) GetWait() bool {
	if x != nil {
		return x.Wait
	}
	return false
}

func (x *Server_Machinery_Redis) GetReadTimeout() int32 {
	if x != nil {
		return x.ReadTimeout
	}
	return 0
}

func (x *Server_Machinery_Redis) GetWriteTimeout() int32 {
	if x != nil {
		return x.WriteTimeout
	}
	return 0
}

func (x *Server_Machinery_Redis) GetConnectTimeout() int32 {
	if x != nil {
		return x.ConnectTimeout
	}
	return 0
}

func (x *Server_Machinery_Redis) GetNormalTasksPollPeriod() int32 {
	if x != nil {
		return x.NormalTasksPollPeriod
	}
	return 0
}

func (x *Server_Machinery_Redis) GetDelayedTasksPollPeriod() int32 {
	if x != nil {
		return x.DelayedTasksPollPeriod
	}
	return 0
}

func (x *Server_Machinery_Redis) GetDelayedTasksKey() string {
	if x != nil {
		return x.DelayedTasksKey
	}
	return ""
}

func (x *Server_Machinery_Redis) GetMasterName() string {
	if x != nil {
		return x.MasterName
	}
	return ""
}

type Server_Machinery_AMQP struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Exchange         string                 `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	ExchangeType     string                 `protobuf:"bytes,2,opt,name=exchange_type,json=exchangeType,proto3" json:"exchange_type,omitempty"`
	QueueDeclareArgs map[string]string      `protobuf:"bytes,3,rep,name=queue_declare_args,json=queueDeclareArgs,proto3" json:"queue_declare_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	QueueBindingArgs map[string]string      `protobuf:"bytes,4,rep,name=queue_binding_args,json=queueBindingArgs,proto3" json:"queue_binding_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BindingKey       string                 `protobuf:"bytes,5,opt,name=binding_key,json=bindingKey,proto3" json:"binding_key,omitempty"`
	PrefetchCount    int32                  `protobuf:"varint,6,opt,name=prefetch_count,json=prefetchCount,proto3" json:"prefetch_count,omitempty"`
	AutoDelete       bool                   `protobuf:"varint,7,opt,name=auto_delete,json=autoDelete,proto3" json:"auto_delete,omitempty"`
	DelayedQueue     string                 `protobuf:"bytes,8,opt,name=delayed_queue,json=delayedQueue,proto3" json:"delayed_queue,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Server_Machinery_AMQP) Reset() {
	*x = Server_Machinery_AMQP{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_Machinery_AMQP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Machinery_AMQP) ProtoMessage() {}

func (x *Server_Machinery_AMQP) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Machinery_AMQP.ProtoReflect.Descriptor instead.
func (*Server_Machinery_AMQP) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 13, 1}
}

func (x *Server_Machinery_AMQP) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Server_Machinery_AMQP) GetExchangeType() string {
	if x != nil {
		return x.ExchangeType
	}
	return ""
}

func (x *Server_Machinery_AMQP) GetQueueDeclareArgs() map[string]string {
	if x != nil {
		return x.QueueDeclareArgs
	}
	return nil
}

func (x *Server_Machinery_AMQP) GetQueueBindingArgs() map[string]string {
	if x != nil {
		return x.QueueBindingArgs
	}
	return nil
}

func (x *Server_Machinery_AMQP) GetBindingKey() string {
	if x != nil {
		return x.BindingKey
	}
	return ""
}

func (x *Server_Machinery_AMQP) GetPrefetchCount() int32 {
	if x != nil {
		return x.PrefetchCount
	}
	return 0
}

func (x *Server_Machinery_AMQP) GetAutoDelete() bool {
	if x != nil {
		return x.AutoDelete
	}
	return false
}

func (x *Server_Machinery_AMQP) GetDelayedQueue() string {
	if x != nil {
		return x.DelayedQueue
	}
	return ""
}

type Server_Machinery_SQS struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	ReceiveWaitTimeSeconds   int32                  `protobuf:"varint,1,opt,name=receive_wait_time_seconds,json=receiveWaitTimeSeconds,proto3" json:"receive_wait_time_seconds,omitempty"`
	ReceiveVisibilityTimeout *int32                 `protobuf:"varint,2,opt,name=receive_visibility_timeout,json=receiveVisibilityTimeout,proto3,oneof" json:"receive_visibility_timeout,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Server_Machinery_SQS) Reset() {
	*x = Server_Machinery_SQS{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_Machinery_SQS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Machinery_SQS) ProtoMessage() {}

func (x *Server_Machinery_SQS) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Machinery_SQS.ProtoReflect.Descriptor instead.
func (*Server_Machinery_SQS) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 13, 2}
}

func (x *Server_Machinery_SQS) GetReceiveWaitTimeSeconds() int32 {
	if x != nil {
		return x.ReceiveWaitTimeSeconds
	}
	return 0
}

func (x *Server_Machinery_SQS) GetReceiveVisibilityTimeout() int32 {
	if x != nil && x.ReceiveVisibilityTimeout != nil {
		return *x.ReceiveVisibilityTimeout
	}
	return 0
}

type Server_Machinery_GCP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxExtension  *durationpb.Duration   `protobuf:"bytes,1,opt,name=max_extension,json=maxExtension,proto3" json:"max_extension,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_Machinery_GCP) Reset() {
	*x = Server_Machinery_GCP{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_Machinery_GCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Machinery_GCP) ProtoMessage() {}

func (x *Server_Machinery_GCP) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Machinery_GCP.ProtoReflect.Descriptor instead.
func (*Server_Machinery_GCP) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 13, 3}
}

func (x *Server_Machinery_GCP) GetMaxExtension() *durationpb.Duration {
	if x != nil {
		return x.MaxExtension
	}
	return nil
}

type Server_Machinery_MongoDB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Database      string                 `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_Machinery_MongoDB) Reset() {
	*x = Server_Machinery_MongoDB{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_Machinery_MongoDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Machinery_MongoDB) ProtoMessage() {}

func (x *Server_Machinery_MongoDB) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Machinery_MongoDB.ProtoReflect.Descriptor instead.
func (*Server_Machinery_MongoDB) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 13, 4}
}

func (x *Server_Machinery_MongoDB) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type Server_Machinery_DynamoDB struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TaskStatesTable string                 `protobuf:"bytes,1,opt,name=task_states_table,json=taskStatesTable,proto3" json:"task_states_table,omitempty"`
	GroupMetasTable string                 `protobuf:"bytes,2,opt,name=group_metas_table,json=groupMetasTable,proto3" json:"group_metas_table,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Server_Machinery_DynamoDB) Reset() {
	*x = Server_Machinery_DynamoDB{}
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_Machinery_DynamoDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Machinery_DynamoDB) ProtoMessage() {}

func (x *Server_Machinery_DynamoDB) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_server_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Machinery_DynamoDB.ProtoReflect.Descriptor instead.
func (*Server_Machinery_DynamoDB) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_server_proto_rawDescGZIP(), []int{0, 13, 5}
}

func (x *Server_Machinery_DynamoDB) GetTaskStatesTable() string {
	if x != nil {
		return x.TaskStatesTable
	}
	return ""
}

func (x *Server_Machinery_DynamoDB) GetGroupMetasTable() string {
	if x != nil {
		return x.GroupMetasTable
	}
	return ""
}

var File_conf_v1_kratos_conf_server_proto protoreflect.FileDescriptor

const file_conf_v1_kratos_conf_server_proto_rawDesc = "" +
	"\n" +
	" conf/v1/kratos_conf_server.proto\x12\x04conf\x1a\x1egoogle/protobuf/duration.proto\x1a$conf/v1/kratos_conf_middleware.proto\x1a\x1dconf/v1/kratos_conf_tls.proto\"\xec=\n" +
	"\x06Server\x12*\n" +
	"\x04rest\x18\x01 \x01(\v2\x11.conf.Server.RESTH\x00R\x04rest\x88\x01\x01\x12*\n" +
	"\x04grpc\x18\x02 \x01(\v2\x11.conf.Server.GRPCH\x01R\x04grpc\x88\x01\x01\x123\n" +
	"\agraphql\x18\x03 \x01(\v2\x14.conf.Server.GraphQLH\x02R\agraphql\x88\x01\x01\x120\n" +
	"\x06thrift\x18\x04 \x01(\v2\x13.conf.Server.ThriftH\x03R\x06thrift\x88\x01\x01\x129\n" +
	"\tkeepalive\x18\x05 \x01(\v2\x16.conf.Server.KeepAliveH\x04R\tkeepalive\x88\x01\x01\x12*\n" +
	"\x04mqtt\x18\n" +
	" \x01(\v2\x11.conf.Server.MqttH\x05R\x04mqtt\x88\x01\x01\x12-\n" +
	"\x05kafka\x18\v \x01(\v2\x12.conf.Server.KafkaH\x06R\x05kafka\x88\x01\x01\x126\n" +
	"\brabbitmq\x18\f \x01(\v2\x15.conf.Server.RabbitMQH\aR\brabbitmq\x88\x01\x01\x126\n" +
	"\bactivemq\x18\r \x01(\v2\x15.conf.Server.ActiveMQH\bR\bactivemq\x88\x01\x01\x12*\n" +
	"\x04nats\x18\x0e \x01(\v2\x11.conf.Server.NATSH\tR\x04nats\x88\x01\x01\x12'\n" +
	"\x03nsq\x18\x0f \x01(\v2\x10.conf.Server.NSQH\n" +
	"R\x03nsq\x88\x01\x01\x120\n" +
	"\x06pulsar\x18\x10 \x01(\v2\x13.conf.Server.PulsarH\vR\x06pulsar\x88\x01\x01\x12-\n" +
	"\x05redis\x18\x11 \x01(\v2\x12.conf.Server.RedisH\fR\x05redis\x88\x01\x01\x126\n" +
	"\brocketmq\x18\x12 \x01(\v2\x15.conf.Server.RocketMQH\rR\brocketmq\x88\x01\x01\x129\n" +
	"\twebsocket\x18\x14 \x01(\v2\x16.conf.Server.WebsocketH\x0eR\twebsocket\x88\x01\x01\x12'\n" +
	"\x03sse\x18\x15 \x01(\v2\x10.conf.Server.SSEH\x0fR\x03sse\x88\x01\x01\x126\n" +
	"\bsocketio\x18\x16 \x01(\v2\x15.conf.Server.SocketIOH\x10R\bsocketio\x88\x01\x01\x123\n" +
	"\asignalr\x18\x17 \x01(\v2\x14.conf.Server.SignalRH\x11R\asignalr\x88\x01\x01\x12-\n" +
	"\x05asynq\x18\x1e \x01(\v2\x12.conf.Server.AsynqH\x12R\x05asynq\x88\x01\x01\x129\n" +
	"\tmachinery\x18\x1f \x01(\v2\x16.conf.Server.MachineryH\x13R\tmachinery\x88\x01\x01\x1a\x84\x03\n" +
	"\x04REST\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x123\n" +
	"\atimeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12*\n" +
	"\x04cors\x18\n" +
	" \x01(\v2\x16.conf.Server.REST.CORSR\x04cors\x120\n" +
	"\n" +
	"middleware\x18\v \x01(\v2\x10.conf.MiddlewareR\n" +
	"middleware\x12\x1b\n" +
	"\x03tls\x18\f \x01(\v2\t.conf.TLSR\x03tls\x12%\n" +
	"\x0eenable_swagger\x18\x14 \x01(\bR\renableSwagger\x12!\n" +
	"\fenable_pprof\x18\x15 \x01(\bR\venablePprof\x1aT\n" +
	"\x04CORS\x12\x18\n" +
	"\aheaders\x18\x01 \x03(\tR\aheaders\x12\x18\n" +
	"\amethods\x18\x02 \x03(\tR\amethods\x12\x18\n" +
	"\aorigins\x18\x03 \x03(\tR\aorigins\x1a\xb8\x01\n" +
	"\x04GRPC\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x123\n" +
	"\atimeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x120\n" +
	"\n" +
	"middleware\x18\x04 \x01(\v2\x10.conf.MiddlewareR\n" +
	"middleware\x12\x1b\n" +
	"\x03tls\x18\x05 \x01(\v2\t.conf.TLSR\x03tls\x1a\xb5\x01\n" +
	"\tWebsocket\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x12\x12\n" +
	"\x04path\x18\x03 \x01(\tR\x04path\x12\x14\n" +
	"\x05codec\x18\x04 \x01(\tR\x05codec\x123\n" +
	"\atimeout\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12\x1b\n" +
	"\x03tls\x18\x06 \x01(\v2\t.conf.TLSR\x03tls\x1a\xcf\x01\n" +
	"\x04Mqtt\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x14\n" +
	"\x05codec\x18\x02 \x01(\tR\x05codec\x12\x1b\n" +
	"\x03tls\x18\x03 \x01(\v2\t.conf.TLSR\x03tls\x12\x1a\n" +
	"\busername\x18\x04 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x05 \x01(\tR\bpassword\x12\x1b\n" +
	"\tclient_id\x18\x06 \x01(\tR\bclientId\x12#\n" +
	"\rclean_session\x18\a \x01(\bR\fcleanSession\x1aX\n" +
	"\x05Kafka\x12\x1c\n" +
	"\tendpoints\x18\x01 \x03(\tR\tendpoints\x12\x14\n" +
	"\x05codec\x18\x02 \x01(\tR\x05codec\x12\x1b\n" +
	"\x03tls\x18\x03 \x01(\v2\t.conf.TLSR\x03tls\x1a[\n" +
	"\bRabbitMQ\x12\x1c\n" +
	"\tendpoints\x18\x01 \x03(\tR\tendpoints\x12\x14\n" +
	"\x05codec\x18\x02 \x01(\tR\x05codec\x12\x1b\n" +
	"\x03tls\x18\x03 \x01(\v2\t.conf.TLSR\x03tls\x1aY\n" +
	"\bActiveMQ\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x14\n" +
	"\x05codec\x18\x02 \x01(\tR\x05codec\x12\x1b\n" +
	"\x03tls\x18\x03 \x01(\v2\t.conf.TLSR\x03tls\x1aU\n" +
	"\x04NATS\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x14\n" +
	"\x05codec\x18\x02 \x01(\tR\x05codec\x12\x1b\n" +
	"\x03tls\x18\x03 \x01(\v2\t.conf.TLSR\x03tls\x1aT\n" +
	"\x03NSQ\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x14\n" +
	"\x05codec\x18\x02 \x01(\tR\x05codec\x12\x1b\n" +
	"\x03tls\x18\x03 \x01(\v2\t.conf.TLSR\x03tls\x1aW\n" +
	"\x06Pulsar\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x14\n" +
	"\x05codec\x18\x02 \x01(\tR\x05codec\x12\x1b\n" +
	"\x03tls\x18\x03 \x01(\v2\t.conf.TLSR\x03tls\x1aV\n" +
	"\x05Redis\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x14\n" +
	"\x05codec\x18\x02 \x01(\tR\x05codec\x12\x1b\n" +
	"\x03tls\x18\x03 \x01(\v2\t.conf.TLSR\x03tls\x1a\x92\x03\n" +
	"\bRocketMQ\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12\x14\n" +
	"\x05codec\x18\x02 \x01(\tR\x05codec\x12!\n" +
	"\fname_servers\x18\x03 \x03(\tR\vnameServers\x12,\n" +
	"\x12name_server_domain\x18\x04 \x01(\tR\x10nameServerDomain\x12\x1d\n" +
	"\n" +
	"access_key\x18\x05 \x01(\tR\taccessKey\x12\x1d\n" +
	"\n" +
	"secret_key\x18\x06 \x01(\tR\tsecretKey\x12%\n" +
	"\x0esecurity_token\x18\a \x01(\tR\rsecurityToken\x12\x1c\n" +
	"\tnamespace\x18\b \x01(\tR\tnamespace\x12#\n" +
	"\rinstance_name\x18\t \x01(\tR\finstanceName\x12\x1d\n" +
	"\n" +
	"group_name\x18\n" +
	" \x01(\tR\tgroupName\x12\x1b\n" +
	"\x03tls\x18\v \x01(\v2\t.conf.TLSR\x03tls\x12!\n" +
	"\fenable_trace\x18d \x01(\bR\venableTrace\x1a\xcd\b\n" +
	"\x05Asynq\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x1a\n" +
	"\bendpoint\x18\x02 \x01(\tR\bendpoint\x12\x1a\n" +
	"\bpassword\x18\x03 \x01(\tR\bpassword\x12\x0e\n" +
	"\x02db\x18\x04 \x01(\x05R\x02db\x12\x10\n" +
	"\x03uri\x18\x05 \x01(\tR\x03uri\x12\x1b\n" +
	"\tpool_size\x18\x06 \x01(\x05R\bpoolSize\x12\x1b\n" +
	"\x03tls\x18\a \x01(\v2\t.conf.TLSR\x03tls\x12\x14\n" +
	"\x05codec\x18\b \x01(\tR\x05codec\x12\x1a\n" +
	"\blocation\x18\n" +
	" \x01(\tR\blocation\x12 \n" +
	"\vconcurrency\x18\v \x01(\x05R\vconcurrency\x12$\n" +
	"\x0egroup_max_size\x18\f \x01(\x05R\fgroupMaxSize\x126\n" +
	"\x06queues\x18\r \x03(\v2\x1e.conf.Server.Asynq.QueuesEntryR\x06queues\x12<\n" +
	"\x1aenable_gracefully_shutdown\x18\x14 \x01(\bR\x18enableGracefullyShutdown\x124\n" +
	"\x16enable_strict_priority\x18\x15 \x01(\bR\x14enableStrictPriority\x12D\n" +
	"\x10shutdown_timeout\x18\x1e \x01(\v2\x19.google.protobuf.DurationR\x0fshutdownTimeout\x12<\n" +
	"\fdial_timeout\x18\x1f \x01(\v2\x19.google.protobuf.DurationR\vdialTimeout\x12<\n" +
	"\fread_timeout\x18  \x01(\v2\x19.google.protobuf.DurationR\vreadTimeout\x12>\n" +
	"\rwrite_timeout\x18! \x01(\v2\x19.google.protobuf.DurationR\fwriteTimeout\x12M\n" +
	"\x15health_check_interval\x18\" \x01(\v2\x19.google.protobuf.DurationR\x13healthCheckInterval\x12X\n" +
	"\x1bdelayed_task_check_interval\x18# \x01(\v2\x19.google.protobuf.DurationR\x18delayedTaskCheckInterval\x12G\n" +
	"\x12group_grace_period\x18$ \x01(\v2\x19.google.protobuf.DurationR\x10groupGracePeriod\x12A\n" +
	"\x0fgroup_max_delay\x18% \x01(\v2\x19.google.protobuf.DurationR\rgroupMaxDelay\x1a9\n" +
	"\vQueuesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a\xbc\x11\n" +
	"\tMachinery\x12\x1f\n" +
	"\vbroker_type\x18\x01 \x01(\tR\n" +
	"brokerType\x12\x1f\n" +
	"\vbroker_addr\x18\x02 \x01(\tR\n" +
	"brokerAddr\x12\x1b\n" +
	"\tbroker_db\x18\x03 \x01(\x05R\bbrokerDb\x12!\n" +
	"\fbackend_type\x18\n" +
	" \x01(\tR\vbackendType\x12!\n" +
	"\fbackend_addr\x18\v \x01(\tR\vbackendAddr\x12\x1d\n" +
	"\n" +
	"backend_db\x18\f \x01(\x05R\tbackendDb\x12\x1b\n" +
	"\tlock_type\x18\x14 \x01(\tR\blockType\x12\x1b\n" +
	"\tlock_addr\x18\x15 \x01(\tR\blockAddr\x12\x17\n" +
	"\alock_db\x18\x16 \x01(\x05R\x06lockDb\x12!\n" +
	"\fconsumer_tag\x18\x1e \x01(\tR\vconsumerTag\x121\n" +
	"\x14consumer_concurrency\x18\x1f \x01(\x05R\x13consumerConcurrency\x12%\n" +
	"\x0econsumer_queue\x18  \x01(\tR\rconsumerQueue\x12\x1b\n" +
	"\x03tls\x182 \x01(\v2\t.conf.TLSR\x03tls\x12#\n" +
	"\rdefault_queue\x183 \x01(\tR\fdefaultQueue\x12*\n" +
	"\x11results_expire_in\x184 \x01(\x05R\x0fresultsExpireIn\x12&\n" +
	"\x0fno_unix_signals\x185 \x01(\bR\rnoUnixSignals\x122\n" +
	"\x05redis\x18d \x01(\v2\x1c.conf.Server.Machinery.RedisR\x05redis\x12/\n" +
	"\x04amqp\x18e \x01(\v2\x1b.conf.Server.Machinery.AMQPR\x04amqp\x12,\n" +
	"\x03sqs\x18f \x01(\v2\x1a.conf.Server.Machinery.SQSR\x03sqs\x12,\n" +
	"\x03gcp\x18g \x01(\v2\x1a.conf.Server.Machinery.GCPR\x03gcp\x128\n" +
	"\amongodb\x18h \x01(\v2\x1e.conf.Server.Machinery.MongoDBR\amongodb\x12;\n" +
	"\bdynamodb\x18i \x01(\v2\x1f.conf.Server.Machinery.DynamoDBR\bdynamodb\x1a\xb1\x03\n" +
	"\x05Redis\x12\x19\n" +
	"\bmax_idle\x18\x01 \x01(\x05R\amaxIdle\x12\x1d\n" +
	"\n" +
	"max_active\x18\x02 \x01(\x05R\tmaxActive\x12(\n" +
	"\x10max_idle_timeout\x18\x03 \x01(\x05R\x0emaxIdleTimeout\x12\x12\n" +
	"\x04wait\x18\x04 \x01(\bR\x04wait\x12!\n" +
	"\fread_timeout\x18\x05 \x01(\x05R\vreadTimeout\x12#\n" +
	"\rwrite_timeout\x18\x06 \x01(\x05R\fwriteTimeout\x12'\n" +
	"\x0fconnect_timeout\x18\a \x01(\x05R\x0econnectTimeout\x127\n" +
	"\x18normal_tasks_poll_period\x18\b \x01(\x05R\x15normalTasksPollPeriod\x129\n" +
	"\x19delayed_tasks_poll_period\x18\t \x01(\x05R\x16delayedTasksPollPeriod\x12*\n" +
	"\x11delayed_tasks_key\x18\n" +
	" \x01(\tR\x0fdelayedTasksKey\x12\x1f\n" +
	"\vmaster_name\x18\v \x01(\tR\n" +
	"masterName\x1a\xa1\x04\n" +
	"\x04AMQP\x12\x1a\n" +
	"\bexchange\x18\x01 \x01(\tR\bexchange\x12#\n" +
	"\rexchange_type\x18\x02 \x01(\tR\fexchangeType\x12_\n" +
	"\x12queue_declare_args\x18\x03 \x03(\v21.conf.Server.Machinery.AMQP.QueueDeclareArgsEntryR\x10queueDeclareArgs\x12_\n" +
	"\x12queue_binding_args\x18\x04 \x03(\v21.conf.Server.Machinery.AMQP.QueueBindingArgsEntryR\x10queueBindingArgs\x12\x1f\n" +
	"\vbinding_key\x18\x05 \x01(\tR\n" +
	"bindingKey\x12%\n" +
	"\x0eprefetch_count\x18\x06 \x01(\x05R\rprefetchCount\x12\x1f\n" +
	"\vauto_delete\x18\a \x01(\bR\n" +
	"autoDelete\x12#\n" +
	"\rdelayed_queue\x18\b \x01(\tR\fdelayedQueue\x1aC\n" +
	"\x15QueueDeclareArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aC\n" +
	"\x15QueueBindingArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\xa2\x01\n" +
	"\x03SQS\x129\n" +
	"\x19receive_wait_time_seconds\x18\x01 \x01(\x05R\x16receiveWaitTimeSeconds\x12A\n" +
	"\x1areceive_visibility_timeout\x18\x02 \x01(\x05H\x00R\x18receiveVisibilityTimeout\x88\x01\x01B\x1d\n" +
	"\x1b_receive_visibility_timeout\x1aE\n" +
	"\x03GCP\x12>\n" +
	"\rmax_extension\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\fmaxExtension\x1a%\n" +
	"\aMongoDB\x12\x1a\n" +
	"\bdatabase\x18\x01 \x01(\tR\bdatabase\x1ab\n" +
	"\bDynamoDB\x12*\n" +
	"\x11task_states_table\x18\x01 \x01(\tR\x0ftaskStatesTable\x12*\n" +
	"\x11group_metas_table\x18\x02 \x01(\tR\x0fgroupMetasTable\x1a\xeb\x02\n" +
	"\x03SSE\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x12\x12\n" +
	"\x04path\x18\x03 \x01(\tR\x04path\x12\x14\n" +
	"\x05codec\x18\x04 \x01(\tR\x05codec\x12\x1b\n" +
	"\x03tls\x18\x05 \x01(\v2\t.conf.TLSR\x03tls\x123\n" +
	"\atimeout\x18\n" +
	" \x01(\v2\x19.google.protobuf.DurationR\atimeout\x126\n" +
	"\tevent_ttl\x18\v \x01(\v2\x19.google.protobuf.DurationR\beventTtl\x12\x1f\n" +
	"\vauto_stream\x18\x14 \x01(\bR\n" +
	"autoStream\x12\x1d\n" +
	"\n" +
	"auto_reply\x18\x15 \x01(\bR\tautoReply\x12\x1d\n" +
	"\n" +
	"split_data\x18\x16 \x01(\bR\tsplitData\x12#\n" +
	"\rencode_base64\x18\x17 \x01(\bR\fencodeBase64\x1a\x7f\n" +
	"\bSocketIO\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x12\x12\n" +
	"\x04path\x18\x03 \x01(\tR\x04path\x12\x14\n" +
	"\x05codec\x18\x04 \x01(\tR\x05codec\x12\x1b\n" +
	"\x03tls\x18\x05 \x01(\v2\t.conf.TLSR\x03tls\x1a\xce\x02\n" +
	"\aSignalR\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x12\x14\n" +
	"\x05codec\x18\x03 \x01(\tR\x05codec\x12\x1b\n" +
	"\x03tls\x18\x04 \x01(\v2\t.conf.TLSR\x03tls\x12I\n" +
	"\x13keep_alive_interval\x18\n" +
	" \x01(\v2\x19.google.protobuf.DurationR\x11keepAliveInterval\x12K\n" +
	"\x14chan_receive_timeout\x18\v \x01(\v2\x19.google.protobuf.DurationR\x12chanReceiveTimeout\x12\x14\n" +
	"\x05debug\x18\x06 \x01(\bR\x05debug\x124\n" +
	"\x16stream_buffer_capacity\x18\a \x01(\rR\x14streamBufferCapacity\x1a\xd6\x01\n" +
	"\aGraphQL\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x12\x12\n" +
	"\x04path\x18\x03 \x01(\tR\x04path\x12\x14\n" +
	"\x05codec\x18\x04 \x01(\tR\x05codec\x123\n" +
	"\atimeout\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12!\n" +
	"\fstrict_slash\x18\x06 \x01(\bR\vstrictSlash\x12\x1b\n" +
	"\x03tls\x18\a \x01(\v2\t.conf.TLSR\x03tls\x1a\xc4\x01\n" +
	"\x06Thrift\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x12\x1a\n" +
	"\bprotocol\x18\x03 \x01(\tR\bprotocol\x12\x1a\n" +
	"\bbuffered\x18\x04 \x01(\bR\bbuffered\x12\x16\n" +
	"\x06framed\x18\x05 \x01(\bR\x06framed\x12\x1f\n" +
	"\vbuffer_size\x18\x06 \x01(\bR\n" +
	"bufferSize\x12\x1b\n" +
	"\x03tls\x18\a \x01(\v2\t.conf.TLSR\x03tls\x1aV\n" +
	"\tKeepAlive\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x12\x1b\n" +
	"\x03tls\x18\x03 \x01(\v2\t.conf.TLSR\x03tlsB\a\n" +
	"\x05_restB\a\n" +
	"\x05_grpcB\n" +
	"\n" +
	"\b_graphqlB\t\n" +
	"\a_thriftB\f\n" +
	"\n" +
	"_keepaliveB\a\n" +
	"\x05_mqttB\b\n" +
	"\x06_kafkaB\v\n" +
	"\t_rabbitmqB\v\n" +
	"\t_activemqB\a\n" +
	"\x05_natsB\x06\n" +
	"\x04_nsqB\t\n" +
	"\a_pulsarB\b\n" +
	"\x06_redisB\v\n" +
	"\t_rocketmqB\f\n" +
	"\n" +
	"_websocketB\x06\n" +
	"\x04_sseB\v\n" +
	"\t_socketioB\n" +
	"\n" +
	"\b_signalrB\b\n" +
	"\x06_asynqB\f\n" +
	"\n" +
	"_machineryB\x87\x01\n" +
	"\bcom.confB\x15KratosConfServerProtoP\x01Z4github.com/tx7do/kratos-bootstrap/api/gen/go/conf/v1\xa2\x02\x03CXX\xaa\x02\x04Conf\xca\x02\x04Conf\xe2\x02\x10Conf\\GPBMetadata\xea\x02\x04Confb\x06proto3"

var (
	file_conf_v1_kratos_conf_server_proto_rawDescOnce sync.Once
	file_conf_v1_kratos_conf_server_proto_rawDescData []byte
)

func file_conf_v1_kratos_conf_server_proto_rawDescGZIP() []byte {
	file_conf_v1_kratos_conf_server_proto_rawDescOnce.Do(func() {
		file_conf_v1_kratos_conf_server_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_conf_v1_kratos_conf_server_proto_rawDesc), len(file_conf_v1_kratos_conf_server_proto_rawDesc)))
	})
	return file_conf_v1_kratos_conf_server_proto_rawDescData
}

var file_conf_v1_kratos_conf_server_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_conf_v1_kratos_conf_server_proto_goTypes = []any{
	(*Server)(nil),                    // 0: conf.Server
	(*Server_REST)(nil),               // 1: conf.Server.REST
	(*Server_GRPC)(nil),               // 2: conf.Server.GRPC
	(*Server_Websocket)(nil),          // 3: conf.Server.Websocket
	(*Server_Mqtt)(nil),               // 4: conf.Server.Mqtt
	(*Server_Kafka)(nil),              // 5: conf.Server.Kafka
	(*Server_RabbitMQ)(nil),           // 6: conf.Server.RabbitMQ
	(*Server_ActiveMQ)(nil),           // 7: conf.Server.ActiveMQ
	(*Server_NATS)(nil),               // 8: conf.Server.NATS
	(*Server_NSQ)(nil),                // 9: conf.Server.NSQ
	(*Server_Pulsar)(nil),             // 10: conf.Server.Pulsar
	(*Server_Redis)(nil),              // 11: conf.Server.Redis
	(*Server_RocketMQ)(nil),           // 12: conf.Server.RocketMQ
	(*Server_Asynq)(nil),              // 13: conf.Server.Asynq
	(*Server_Machinery)(nil),          // 14: conf.Server.Machinery
	(*Server_SSE)(nil),                // 15: conf.Server.SSE
	(*Server_SocketIO)(nil),           // 16: conf.Server.SocketIO
	(*Server_SignalR)(nil),            // 17: conf.Server.SignalR
	(*Server_GraphQL)(nil),            // 18: conf.Server.GraphQL
	(*Server_Thrift)(nil),             // 19: conf.Server.Thrift
	(*Server_KeepAlive)(nil),          // 20: conf.Server.KeepAlive
	(*Server_REST_CORS)(nil),          // 21: conf.Server.REST.CORS
	nil,                               // 22: conf.Server.Asynq.QueuesEntry
	(*Server_Machinery_Redis)(nil),    // 23: conf.Server.Machinery.Redis
	(*Server_Machinery_AMQP)(nil),     // 24: conf.Server.Machinery.AMQP
	(*Server_Machinery_SQS)(nil),      // 25: conf.Server.Machinery.SQS
	(*Server_Machinery_GCP)(nil),      // 26: conf.Server.Machinery.GCP
	(*Server_Machinery_MongoDB)(nil),  // 27: conf.Server.Machinery.MongoDB
	(*Server_Machinery_DynamoDB)(nil), // 28: conf.Server.Machinery.DynamoDB
	nil,                               // 29: conf.Server.Machinery.AMQP.QueueDeclareArgsEntry
	nil,                               // 30: conf.Server.Machinery.AMQP.QueueBindingArgsEntry
	(*durationpb.Duration)(nil),       // 31: google.protobuf.Duration
	(*Middleware)(nil),                // 32: conf.Middleware
	(*TLS)(nil),                       // 33: conf.TLS
}
var file_conf_v1_kratos_conf_server_proto_depIdxs = []int32{
	1,  // 0: conf.Server.rest:type_name -> conf.Server.REST
	2,  // 1: conf.Server.grpc:type_name -> conf.Server.GRPC
	18, // 2: conf.Server.graphql:type_name -> conf.Server.GraphQL
	19, // 3: conf.Server.thrift:type_name -> conf.Server.Thrift
	20, // 4: conf.Server.keepalive:type_name -> conf.Server.KeepAlive
	4,  // 5: conf.Server.mqtt:type_name -> conf.Server.Mqtt
	5,  // 6: conf.Server.kafka:type_name -> conf.Server.Kafka
	6,  // 7: conf.Server.rabbitmq:type_name -> conf.Server.RabbitMQ
	7,  // 8: conf.Server.activemq:type_name -> conf.Server.ActiveMQ
	8,  // 9: conf.Server.nats:type_name -> conf.Server.NATS
	9,  // 10: conf.Server.nsq:type_name -> conf.Server.NSQ
	10, // 11: conf.Server.pulsar:type_name -> conf.Server.Pulsar
	11, // 12: conf.Server.redis:type_name -> conf.Server.Redis
	12, // 13: conf.Server.rocketmq:type_name -> conf.Server.RocketMQ
	3,  // 14: conf.Server.websocket:type_name -> conf.Server.Websocket
	15, // 15: conf.Server.sse:type_name -> conf.Server.SSE
	16, // 16: conf.Server.socketio:type_name -> conf.Server.SocketIO
	17, // 17: conf.Server.signalr:type_name -> conf.Server.SignalR
	13, // 18: conf.Server.asynq:type_name -> conf.Server.Asynq
	14, // 19: conf.Server.machinery:type_name -> conf.Server.Machinery
	31, // 20: conf.Server.REST.timeout:type_name -> google.protobuf.Duration
	21, // 21: conf.Server.REST.cors:type_name -> conf.Server.REST.CORS
	32, // 22: conf.Server.REST.middleware:type_name -> conf.Middleware
	33, // 23: conf.Server.REST.tls:type_name -> conf.TLS
	31, // 24: conf.Server.GRPC.timeout:type_name -> google.protobuf.Duration
	32, // 25: conf.Server.GRPC.middleware:type_name -> conf.Middleware
	33, // 26: conf.Server.GRPC.tls:type_name -> conf.TLS
	31, // 27: conf.Server.Websocket.timeout:type_name -> google.protobuf.Duration
	33, // 28: conf.Server.Websocket.tls:type_name -> conf.TLS
	33, // 29: conf.Server.Mqtt.tls:type_name -> conf.TLS
	33, // 30: conf.Server.Kafka.tls:type_name -> conf.TLS
	33, // 31: conf.Server.RabbitMQ.tls:type_name -> conf.TLS
	33, // 32: conf.Server.ActiveMQ.tls:type_name -> conf.TLS
	33, // 33: conf.Server.NATS.tls:type_name -> conf.TLS
	33, // 34: conf.Server.NSQ.tls:type_name -> conf.TLS
	33, // 35: conf.Server.Pulsar.tls:type_name -> conf.TLS
	33, // 36: conf.Server.Redis.tls:type_name -> conf.TLS
	33, // 37: conf.Server.RocketMQ.tls:type_name -> conf.TLS
	33, // 38: conf.Server.Asynq.tls:type_name -> conf.TLS
	22, // 39: conf.Server.Asynq.queues:type_name -> conf.Server.Asynq.QueuesEntry
	31, // 40: conf.Server.Asynq.shutdown_timeout:type_name -> google.protobuf.Duration
	31, // 41: conf.Server.Asynq.dial_timeout:type_name -> google.protobuf.Duration
	31, // 42: conf.Server.Asynq.read_timeout:type_name -> google.protobuf.Duration
	31, // 43: conf.Server.Asynq.write_timeout:type_name -> google.protobuf.Duration
	31, // 44: conf.Server.Asynq.health_check_interval:type_name -> google.protobuf.Duration
	31, // 45: conf.Server.Asynq.delayed_task_check_interval:type_name -> google.protobuf.Duration
	31, // 46: conf.Server.Asynq.group_grace_period:type_name -> google.protobuf.Duration
	31, // 47: conf.Server.Asynq.group_max_delay:type_name -> google.protobuf.Duration
	33, // 48: conf.Server.Machinery.tls:type_name -> conf.TLS
	23, // 49: conf.Server.Machinery.redis:type_name -> conf.Server.Machinery.Redis
	24, // 50: conf.Server.Machinery.amqp:type_name -> conf.Server.Machinery.AMQP
	25, // 51: conf.Server.Machinery.sqs:type_name -> conf.Server.Machinery.SQS
	26, // 52: conf.Server.Machinery.gcp:type_name -> conf.Server.Machinery.GCP
	27, // 53: conf.Server.Machinery.mongodb:type_name -> conf.Server.Machinery.MongoDB
	28, // 54: conf.Server.Machinery.dynamodb:type_name -> conf.Server.Machinery.DynamoDB
	33, // 55: conf.Server.SSE.tls:type_name -> conf.TLS
	31, // 56: conf.Server.SSE.timeout:type_name -> google.protobuf.Duration
	31, // 57: conf.Server.SSE.event_ttl:type_name -> google.protobuf.Duration
	33, // 58: conf.Server.SocketIO.tls:type_name -> conf.TLS
	33, // 59: conf.Server.SignalR.tls:type_name -> conf.TLS
	31, // 60: conf.Server.SignalR.keep_alive_interval:type_name -> google.protobuf.Duration
	31, // 61: conf.Server.SignalR.chan_receive_timeout:type_name -> google.protobuf.Duration
	31, // 62: conf.Server.GraphQL.timeout:type_name -> google.protobuf.Duration
	33, // 63: conf.Server.GraphQL.tls:type_name -> conf.TLS
	33, // 64: conf.Server.Thrift.tls:type_name -> conf.TLS
	33, // 65: conf.Server.KeepAlive.tls:type_name -> conf.TLS
	29, // 66: conf.Server.Machinery.AMQP.queue_declare_args:type_name -> conf.Server.Machinery.AMQP.QueueDeclareArgsEntry
	30, // 67: conf.Server.Machinery.AMQP.queue_binding_args:type_name -> conf.Server.Machinery.AMQP.QueueBindingArgsEntry
	31, // 68: conf.Server.Machinery.GCP.max_extension:type_name -> google.protobuf.Duration
	69, // [69:69] is the sub-list for method output_type
	69, // [69:69] is the sub-list for method input_type
	69, // [69:69] is the sub-list for extension type_name
	69, // [69:69] is the sub-list for extension extendee
	0,  // [0:69] is the sub-list for field type_name
}

func init() { file_conf_v1_kratos_conf_server_proto_init() }
func file_conf_v1_kratos_conf_server_proto_init() {
	if File_conf_v1_kratos_conf_server_proto != nil {
		return
	}
	file_conf_v1_kratos_conf_middleware_proto_init()
	file_conf_v1_kratos_conf_tls_proto_init()
	file_conf_v1_kratos_conf_server_proto_msgTypes[0].OneofWrappers = []any{}
	file_conf_v1_kratos_conf_server_proto_msgTypes[25].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_conf_v1_kratos_conf_server_proto_rawDesc), len(file_conf_v1_kratos_conf_server_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_conf_v1_kratos_conf_server_proto_goTypes,
		DependencyIndexes: file_conf_v1_kratos_conf_server_proto_depIdxs,
		MessageInfos:      file_conf_v1_kratos_conf_server_proto_msgTypes,
	}.Build()
	File_conf_v1_kratos_conf_server_proto = out.File
	file_conf_v1_kratos_conf_server_proto_goTypes = nil
	file_conf_v1_kratos_conf_server_proto_depIdxs = nil
}
