// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: conf/v1/kratos_conf_data.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 数据
type Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Database      *Data_Database         `protobuf:"bytes,1,opt,name=database,proto3,oneof" json:"database,omitempty"`                                 // 数据库DSN
	Redis         *Data_Redis            `protobuf:"bytes,10,opt,name=redis,proto3,oneof" json:"redis,omitempty"`                                      // Redis
	Mongodb       *Data_MongoDB          `protobuf:"bytes,11,opt,name=mongodb,proto3,oneof" json:"mongodb,omitempty"`                                  // MongoDB数据库
	ElasticSearch *Data_ElasticSearch    `protobuf:"bytes,12,opt,name=elastic_search,json=elasticSearch,proto3,oneof" json:"elastic_search,omitempty"` // ElasticSearch数据库
	Cassandra     *Data_Cassandra        `protobuf:"bytes,13,opt,name=cassandra,proto3,oneof" json:"cassandra,omitempty"`                              // Cassandra数据库
	Clickhouse    *Data_ClickHouse       `protobuf:"bytes,20,opt,name=clickhouse,proto3,oneof" json:"clickhouse,omitempty"`                            // ClickHouse数据库
	Influxdb      *Data_InfluxDB         `protobuf:"bytes,21,opt,name=influxdb,proto3,oneof" json:"influxdb,omitempty"`                                // InfluxDB数据库
	Doris         *Data_Doris            `protobuf:"bytes,22,opt,name=doris,proto3,oneof" json:"doris,omitempty"`                                      // Doris数据库
	Kafka         *Data_Kafka            `protobuf:"bytes,30,opt,name=kafka,proto3,oneof" json:"kafka,omitempty"`                                      // Kafka服务
	Rabbitmq      *Data_RabbitMQ         `protobuf:"bytes,31,opt,name=rabbitmq,proto3,oneof" json:"rabbitmq,omitempty"`                                // RabbitMQ服务
	Mqtt          *Data_Mqtt             `protobuf:"bytes,32,opt,name=mqtt,proto3,oneof" json:"mqtt,omitempty"`                                        // MQTT服务
	Activemq      *Data_ActiveMQ         `protobuf:"bytes,33,opt,name=activemq,proto3,oneof" json:"activemq,omitempty"`                                // ActiveMQ
	Nats          *Data_NATS             `protobuf:"bytes,34,opt,name=nats,proto3,oneof" json:"nats,omitempty"`                                        // NATS
	Nsq           *Data_NSQ              `protobuf:"bytes,35,opt,name=nsq,proto3,oneof" json:"nsq,omitempty"`                                          // NATS
	Pulsar        *Data_Pulsar           `protobuf:"bytes,36,opt,name=pulsar,proto3,oneof" json:"pulsar,omitempty"`                                    // Pulsar
	Rocketmq      *Data_RocketMQ         `protobuf:"bytes,38,opt,name=rocketmq,proto3,oneof" json:"rocketmq,omitempty"`                                // RocketMQ
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0}
}

func (x *Data) GetDatabase() *Data_Database {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *Data) GetRedis() *Data_Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Data) GetMongodb() *Data_MongoDB {
	if x != nil {
		return x.Mongodb
	}
	return nil
}

func (x *Data) GetElasticSearch() *Data_ElasticSearch {
	if x != nil {
		return x.ElasticSearch
	}
	return nil
}

func (x *Data) GetCassandra() *Data_Cassandra {
	if x != nil {
		return x.Cassandra
	}
	return nil
}

func (x *Data) GetClickhouse() *Data_ClickHouse {
	if x != nil {
		return x.Clickhouse
	}
	return nil
}

func (x *Data) GetInfluxdb() *Data_InfluxDB {
	if x != nil {
		return x.Influxdb
	}
	return nil
}

func (x *Data) GetDoris() *Data_Doris {
	if x != nil {
		return x.Doris
	}
	return nil
}

func (x *Data) GetKafka() *Data_Kafka {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *Data) GetRabbitmq() *Data_RabbitMQ {
	if x != nil {
		return x.Rabbitmq
	}
	return nil
}

func (x *Data) GetMqtt() *Data_Mqtt {
	if x != nil {
		return x.Mqtt
	}
	return nil
}

func (x *Data) GetActivemq() *Data_ActiveMQ {
	if x != nil {
		return x.Activemq
	}
	return nil
}

func (x *Data) GetNats() *Data_NATS {
	if x != nil {
		return x.Nats
	}
	return nil
}

func (x *Data) GetNsq() *Data_NSQ {
	if x != nil {
		return x.Nsq
	}
	return nil
}

func (x *Data) GetPulsar() *Data_Pulsar {
	if x != nil {
		return x.Pulsar
	}
	return nil
}

func (x *Data) GetRocketmq() *Data_RocketMQ {
	if x != nil {
		return x.Rocketmq
	}
	return nil
}

// 数据库
type Data_Database struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Driver                string                 `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`                                                                     // 驱动名：mysql、postgresql、mongodb、sqlite……
	Source                string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`                                                                     // 数据源（DSN字符串）
	Migrate               bool                   `protobuf:"varint,10,opt,name=migrate,proto3" json:"migrate,omitempty"`                                                                 // 数据迁移开关
	Debug                 bool                   `protobuf:"varint,11,opt,name=debug,proto3" json:"debug,omitempty"`                                                                     // 调试开关
	EnableTrace           bool                   `protobuf:"varint,12,opt,name=enable_trace,json=enableTrace,proto3" json:"enable_trace,omitempty"`                                      // 链路追踪开关
	EnableMetrics         bool                   `protobuf:"varint,13,opt,name=enable_metrics,json=enableMetrics,proto3" json:"enable_metrics,omitempty"`                                // 性能分析开关
	MaxIdleConnections    *int32                 `protobuf:"varint,20,opt,name=max_idle_connections,json=maxIdleConnections,proto3,oneof" json:"max_idle_connections,omitempty"`         // 连接池最大空闲连接数
	MaxOpenConnections    *int32                 `protobuf:"varint,21,opt,name=max_open_connections,json=maxOpenConnections,proto3,oneof" json:"max_open_connections,omitempty"`         // 连接池最大打开连接数
	ConnectionMaxLifetime *durationpb.Duration   `protobuf:"bytes,22,opt,name=connection_max_lifetime,json=connectionMaxLifetime,proto3,oneof" json:"connection_max_lifetime,omitempty"` // 连接可重用的最大时间长度
	PrometheusPushAddr    *string                `protobuf:"bytes,30,opt,name=prometheus_push_addr,json=prometheusPushAddr,proto3,oneof" json:"prometheus_push_addr,omitempty"`
	PrometheusDbName      *string                `protobuf:"bytes,31,opt,name=prometheus_db_name,json=prometheusDbName,proto3,oneof" json:"prometheus_db_name,omitempty"`
	PrometheusHttpPort    *uint32                `protobuf:"varint,32,opt,name=prometheus_http_port,json=prometheusHttpPort,proto3,oneof" json:"prometheus_http_port,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Data_Database) Reset() {
	*x = Data_Database{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Database) ProtoMessage() {}

func (x *Data_Database) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Database.ProtoReflect.Descriptor instead.
func (*Data_Database) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Data_Database) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *Data_Database) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Data_Database) GetMigrate() bool {
	if x != nil {
		return x.Migrate
	}
	return false
}

func (x *Data_Database) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *Data_Database) GetEnableTrace() bool {
	if x != nil {
		return x.EnableTrace
	}
	return false
}

func (x *Data_Database) GetEnableMetrics() bool {
	if x != nil {
		return x.EnableMetrics
	}
	return false
}

func (x *Data_Database) GetMaxIdleConnections() int32 {
	if x != nil && x.MaxIdleConnections != nil {
		return *x.MaxIdleConnections
	}
	return 0
}

func (x *Data_Database) GetMaxOpenConnections() int32 {
	if x != nil && x.MaxOpenConnections != nil {
		return *x.MaxOpenConnections
	}
	return 0
}

func (x *Data_Database) GetConnectionMaxLifetime() *durationpb.Duration {
	if x != nil {
		return x.ConnectionMaxLifetime
	}
	return nil
}

func (x *Data_Database) GetPrometheusPushAddr() string {
	if x != nil && x.PrometheusPushAddr != nil {
		return *x.PrometheusPushAddr
	}
	return ""
}

func (x *Data_Database) GetPrometheusDbName() string {
	if x != nil && x.PrometheusDbName != nil {
		return *x.PrometheusDbName
	}
	return ""
}

func (x *Data_Database) GetPrometheusHttpPort() uint32 {
	if x != nil && x.PrometheusHttpPort != nil {
		return *x.PrometheusHttpPort
	}
	return 0
}

// redis
type Data_Redis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`                                      // 网络
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`                                            // 服务端地址
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`                                    // 密码
	Db            int32                  `protobuf:"varint,4,opt,name=db,proto3" json:"db,omitempty"`                                               // 数据库索引
	DialTimeout   *durationpb.Duration   `protobuf:"bytes,50,opt,name=dial_timeout,json=dialTimeout,proto3" json:"dial_timeout,omitempty"`          // 连接超时时间
	ReadTimeout   *durationpb.Duration   `protobuf:"bytes,51,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`          // 读取超时时间
	WriteTimeout  *durationpb.Duration   `protobuf:"bytes,52,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`       // 写入超时时间
	EnableTracing bool                   `protobuf:"varint,100,opt,name=enable_tracing,json=enableTracing,proto3" json:"enable_tracing,omitempty"`  // 打开链路追踪
	EnableMetrics bool                   `protobuf:"varint,1001,opt,name=enable_metrics,json=enableMetrics,proto3" json:"enable_metrics,omitempty"` // 打开性能度量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Redis) Reset() {
	*x = Data_Redis{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Redis) ProtoMessage() {}

func (x *Data_Redis) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Redis.ProtoReflect.Descriptor instead.
func (*Data_Redis) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Data_Redis) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Data_Redis) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Data_Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Data_Redis) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *Data_Redis) GetDialTimeout() *durationpb.Duration {
	if x != nil {
		return x.DialTimeout
	}
	return nil
}

func (x *Data_Redis) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *Data_Redis) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *Data_Redis) GetEnableTracing() bool {
	if x != nil {
		return x.EnableTracing
	}
	return false
}

func (x *Data_Redis) GetEnableMetrics() bool {
	if x != nil {
		return x.EnableMetrics
	}
	return false
}

// MongoDB
type Data_MongoDB struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Uri                     string                 `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Database                *string                `protobuf:"bytes,2,opt,name=database,proto3,oneof" json:"database,omitempty"`
	Username                *string                `protobuf:"bytes,10,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Password                *string                `protobuf:"bytes,11,opt,name=password,proto3,oneof" json:"password,omitempty"`
	AuthMechanism           *string                `protobuf:"bytes,20,opt,name=auth_mechanism,json=authMechanism,proto3,oneof" json:"auth_mechanism,omitempty"`                                                                                                     // 认证机制：SCRAM-SHA-1、SCRAM-SHA-256、MONGODB-X509、GSSAPI、PLAIN
	AuthMechanismProperties map[string]string      `protobuf:"bytes,21,rep,name=auth_mechanism_properties,json=authMechanismProperties,proto3" json:"auth_mechanism_properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 认证机制属性
	AuthSource              *string                `protobuf:"bytes,22,opt,name=auth_source,json=authSource,proto3,oneof" json:"auth_source,omitempty"`                                                                                                              // 认证源：admin、$external等
	ConnectTimeout          *durationpb.Duration   `protobuf:"bytes,50,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`                                                                                                        // 连接超时时间
	HeartbeatInterval       *durationpb.Duration   `protobuf:"bytes,51,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`                                                                                               // 心跳间隔
	LocalThreshold          *durationpb.Duration   `protobuf:"bytes,52,opt,name=local_threshold,json=localThreshold,proto3" json:"local_threshold,omitempty"`                                                                                                        // 本地延迟阈值
	MaxConnIdleTime         *durationpb.Duration   `protobuf:"bytes,53,opt,name=max_conn_idle_time,json=maxConnIdleTime,proto3" json:"max_conn_idle_time,omitempty"`                                                                                                 // 最大连接空闲时间
	MaxStaleness            *durationpb.Duration   `protobuf:"bytes,54,opt,name=max_staleness,json=maxStaleness,proto3" json:"max_staleness,omitempty"`                                                                                                              // 最大陈旧时间
	ServerSelectionTimeout  *durationpb.Duration   `protobuf:"bytes,55,opt,name=server_selection_timeout,json=serverSelectionTimeout,proto3" json:"server_selection_timeout,omitempty"`                                                                              // 服务器选择超时时间
	SocketTimeout           *durationpb.Duration   `protobuf:"bytes,56,opt,name=socket_timeout,json=socketTimeout,proto3" json:"socket_timeout,omitempty"`                                                                                                           // 套接字超时时间
	Timeout                 *durationpb.Duration   `protobuf:"bytes,57,opt,name=timeout,proto3" json:"timeout,omitempty"`                                                                                                                                            // 总超时时间
	EnableTracing           bool                   `protobuf:"varint,100,opt,name=enable_tracing,json=enableTracing,proto3" json:"enable_tracing,omitempty"`                                                                                                         // 打开链路追踪
	EnableMetrics           bool                   `protobuf:"varint,101,opt,name=enable_metrics,json=enableMetrics,proto3" json:"enable_metrics,omitempty"`                                                                                                         // 打开性能度量
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Data_MongoDB) Reset() {
	*x = Data_MongoDB{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_MongoDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_MongoDB) ProtoMessage() {}

func (x *Data_MongoDB) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_MongoDB.ProtoReflect.Descriptor instead.
func (*Data_MongoDB) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Data_MongoDB) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Data_MongoDB) GetDatabase() string {
	if x != nil && x.Database != nil {
		return *x.Database
	}
	return ""
}

func (x *Data_MongoDB) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *Data_MongoDB) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *Data_MongoDB) GetAuthMechanism() string {
	if x != nil && x.AuthMechanism != nil {
		return *x.AuthMechanism
	}
	return ""
}

func (x *Data_MongoDB) GetAuthMechanismProperties() map[string]string {
	if x != nil {
		return x.AuthMechanismProperties
	}
	return nil
}

func (x *Data_MongoDB) GetAuthSource() string {
	if x != nil && x.AuthSource != nil {
		return *x.AuthSource
	}
	return ""
}

func (x *Data_MongoDB) GetConnectTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectTimeout
	}
	return nil
}

func (x *Data_MongoDB) GetHeartbeatInterval() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatInterval
	}
	return nil
}

func (x *Data_MongoDB) GetLocalThreshold() *durationpb.Duration {
	if x != nil {
		return x.LocalThreshold
	}
	return nil
}

func (x *Data_MongoDB) GetMaxConnIdleTime() *durationpb.Duration {
	if x != nil {
		return x.MaxConnIdleTime
	}
	return nil
}

func (x *Data_MongoDB) GetMaxStaleness() *durationpb.Duration {
	if x != nil {
		return x.MaxStaleness
	}
	return nil
}

func (x *Data_MongoDB) GetServerSelectionTimeout() *durationpb.Duration {
	if x != nil {
		return x.ServerSelectionTimeout
	}
	return nil
}

func (x *Data_MongoDB) GetSocketTimeout() *durationpb.Duration {
	if x != nil {
		return x.SocketTimeout
	}
	return nil
}

func (x *Data_MongoDB) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Data_MongoDB) GetEnableTracing() bool {
	if x != nil {
		return x.EnableTracing
	}
	return false
}

func (x *Data_MongoDB) GetEnableMetrics() bool {
	if x != nil {
		return x.EnableMetrics
	}
	return false
}

// ClickHouse
type Data_ClickHouse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Addresses             []string               `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`                                           // 对端网络地址
	Database              string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`                                             // 数据库名
	Username              string                 `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`                                             // 用户名
	Password              string                 `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`                                             // 密码
	Debug                 bool                   `protobuf:"varint,5,opt,name=debug,proto3" json:"debug,omitempty"`                                                  // 调试开关
	Protocol              string                 `protobuf:"bytes,6,opt,name=protocol,proto3" json:"protocol,omitempty"`                                             // 协议：http、https、tcp、native
	Tls                   *TLS                   `protobuf:"bytes,7,opt,name=tls,proto3" json:"tls,omitempty"`                                                       // TLS配置
	CompressionMethod     string                 `protobuf:"bytes,10,opt,name=compression_method,json=compressionMethod,proto3" json:"compression_method,omitempty"` // 压缩方法：lz4、zstd、none
	ConnOpenStrategy      string                 `protobuf:"bytes,11,opt,name=conn_open_strategy,json=connOpenStrategy,proto3" json:"conn_open_strategy,omitempty"`  // 连接打开策略：default、lazy、always
	DialTimeout           *durationpb.Duration   `protobuf:"bytes,20,opt,name=dial_timeout,json=dialTimeout,proto3" json:"dial_timeout,omitempty"`
	ConnMaxLifeTime       *durationpb.Duration   `protobuf:"bytes,21,opt,name=conn_max_life_time,json=connMaxLifeTime,proto3" json:"conn_max_life_time,omitempty"`
	ConnectionMaxLifetime *durationpb.Duration   `protobuf:"bytes,22,opt,name=connection_max_lifetime,json=connectionMaxLifetime,proto3" json:"connection_max_lifetime,omitempty"` // 连接可重用的最大时间长度
	MaxExecutionTime      int32                  `protobuf:"varint,23,opt,name=max_execution_time,json=maxExecutionTime,proto3" json:"max_execution_time,omitempty"`               // 最大执行时间（秒）
	MaxOpenConns          int32                  `protobuf:"varint,30,opt,name=max_open_conns,json=maxOpenConns,proto3" json:"max_open_conns,omitempty"`                           // 连接池最大打开连接数
	MaxIdleConns          int32                  `protobuf:"varint,31,opt,name=max_idle_conns,json=maxIdleConns,proto3" json:"max_idle_conns,omitempty"`                           // 连接池最大空闲连接数
	MaxIdleConnections    int32                  `protobuf:"varint,32,opt,name=max_idle_connections,json=maxIdleConnections,proto3" json:"max_idle_connections,omitempty"`         // 连接池最大空闲连接数
	MaxOpenConnections    int32                  `protobuf:"varint,33,opt,name=max_open_connections,json=maxOpenConnections,proto3" json:"max_open_connections,omitempty"`         // 连接池最大打开连接数
	BlockBufferSize       int32                  `protobuf:"varint,40,opt,name=block_buffer_size,json=blockBufferSize,proto3" json:"block_buffer_size,omitempty"`                  // 数据块缓冲区大小
	MaxCompressionBuffer  int32                  `protobuf:"varint,41,opt,name=max_compression_buffer,json=maxCompressionBuffer,proto3" json:"max_compression_buffer,omitempty"`   // 最大压缩缓冲区大小
	EnableTracing         bool                   `protobuf:"varint,100,opt,name=enable_tracing,json=enableTracing,proto3" json:"enable_tracing,omitempty"`                         // 打开链路追踪
	EnableMetrics         bool                   `protobuf:"varint,101,opt,name=enable_metrics,json=enableMetrics,proto3" json:"enable_metrics,omitempty"`                         // 打开性能度量
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Data_ClickHouse) Reset() {
	*x = Data_ClickHouse{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_ClickHouse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_ClickHouse) ProtoMessage() {}

func (x *Data_ClickHouse) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_ClickHouse.ProtoReflect.Descriptor instead.
func (*Data_ClickHouse) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Data_ClickHouse) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Data_ClickHouse) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Data_ClickHouse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Data_ClickHouse) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Data_ClickHouse) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *Data_ClickHouse) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Data_ClickHouse) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Data_ClickHouse) GetCompressionMethod() string {
	if x != nil {
		return x.CompressionMethod
	}
	return ""
}

func (x *Data_ClickHouse) GetConnOpenStrategy() string {
	if x != nil {
		return x.ConnOpenStrategy
	}
	return ""
}

func (x *Data_ClickHouse) GetDialTimeout() *durationpb.Duration {
	if x != nil {
		return x.DialTimeout
	}
	return nil
}

func (x *Data_ClickHouse) GetConnMaxLifeTime() *durationpb.Duration {
	if x != nil {
		return x.ConnMaxLifeTime
	}
	return nil
}

func (x *Data_ClickHouse) GetConnectionMaxLifetime() *durationpb.Duration {
	if x != nil {
		return x.ConnectionMaxLifetime
	}
	return nil
}

func (x *Data_ClickHouse) GetMaxExecutionTime() int32 {
	if x != nil {
		return x.MaxExecutionTime
	}
	return 0
}

func (x *Data_ClickHouse) GetMaxOpenConns() int32 {
	if x != nil {
		return x.MaxOpenConns
	}
	return 0
}

func (x *Data_ClickHouse) GetMaxIdleConns() int32 {
	if x != nil {
		return x.MaxIdleConns
	}
	return 0
}

func (x *Data_ClickHouse) GetMaxIdleConnections() int32 {
	if x != nil {
		return x.MaxIdleConnections
	}
	return 0
}

func (x *Data_ClickHouse) GetMaxOpenConnections() int32 {
	if x != nil {
		return x.MaxOpenConnections
	}
	return 0
}

func (x *Data_ClickHouse) GetBlockBufferSize() int32 {
	if x != nil {
		return x.BlockBufferSize
	}
	return 0
}

func (x *Data_ClickHouse) GetMaxCompressionBuffer() int32 {
	if x != nil {
		return x.MaxCompressionBuffer
	}
	return 0
}

func (x *Data_ClickHouse) GetEnableTracing() bool {
	if x != nil {
		return x.EnableTracing
	}
	return false
}

func (x *Data_ClickHouse) GetEnableMetrics() bool {
	if x != nil {
		return x.EnableMetrics
	}
	return false
}

// InfluxDB
type Data_InfluxDB struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Host                  string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`                                                                   // 主机地址
	Token                 string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`                                                                 // 认证令牌
	AuthScheme            string                 `protobuf:"bytes,3,opt,name=auth_scheme,json=authScheme,proto3" json:"auth_scheme,omitempty"`                                     // 认证方案：default、basic
	Proxy                 string                 `protobuf:"bytes,4,opt,name=proxy,proto3" json:"proxy,omitempty"`                                                                 // 代理地址
	Organization          string                 `protobuf:"bytes,10,opt,name=organization,proto3" json:"organization,omitempty"`                                                  // 组织名
	Database              string                 `protobuf:"bytes,11,opt,name=database,proto3" json:"database,omitempty"`                                                          // 数据库名
	Timeout               *durationpb.Duration   `protobuf:"bytes,20,opt,name=timeout,proto3" json:"timeout,omitempty"`                                                            // 连接超时时间
	IdleConnectionTimeout *durationpb.Duration   `protobuf:"bytes,21,opt,name=idle_connection_timeout,json=idleConnectionTimeout,proto3" json:"idle_connection_timeout,omitempty"` // 空闲连接超时时间
	MaxIdleConnections    int32                  `protobuf:"varint,22,opt,name=max_idle_connections,json=maxIdleConnections,proto3" json:"max_idle_connections,omitempty"`         // 连接池最大空闲连接数
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Data_InfluxDB) Reset() {
	*x = Data_InfluxDB{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_InfluxDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_InfluxDB) ProtoMessage() {}

func (x *Data_InfluxDB) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_InfluxDB.ProtoReflect.Descriptor instead.
func (*Data_InfluxDB) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Data_InfluxDB) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Data_InfluxDB) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Data_InfluxDB) GetAuthScheme() string {
	if x != nil {
		return x.AuthScheme
	}
	return ""
}

func (x *Data_InfluxDB) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *Data_InfluxDB) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *Data_InfluxDB) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Data_InfluxDB) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Data_InfluxDB) GetIdleConnectionTimeout() *durationpb.Duration {
	if x != nil {
		return x.IdleConnectionTimeout
	}
	return nil
}

func (x *Data_InfluxDB) GetMaxIdleConnections() int32 {
	if x != nil {
		return x.MaxIdleConnections
	}
	return 0
}

type Data_Doris struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Doris) Reset() {
	*x = Data_Doris{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Doris) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Doris) ProtoMessage() {}

func (x *Data_Doris) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Doris.ProtoReflect.Descriptor instead.
func (*Data_Doris) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Data_Doris) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Data_ElasticSearch struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Addresses                []string               `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Username                 string                 `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"`
	Password                 string                 `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`
	CloudId                  string                 `protobuf:"bytes,20,opt,name=cloud_id,json=cloudId,proto3" json:"cloud_id,omitempty"`
	ApiKey                   string                 `protobuf:"bytes,21,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	ServiceToken             string                 `protobuf:"bytes,22,opt,name=service_token,json=serviceToken,proto3" json:"service_token,omitempty"`
	CertificateFingerprint   string                 `protobuf:"bytes,23,opt,name=certificate_fingerprint,json=certificateFingerprint,proto3" json:"certificate_fingerprint,omitempty"`
	DisableRetry             bool                   `protobuf:"varint,30,opt,name=disable_retry,json=disableRetry,proto3" json:"disable_retry,omitempty"`
	MaxRetries               int32                  `protobuf:"varint,31,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	CompressRequestBody      bool                   `protobuf:"varint,40,opt,name=compress_request_body,json=compressRequestBody,proto3" json:"compress_request_body,omitempty"`
	CompressRequestBodyLevel int32                  `protobuf:"varint,41,opt,name=compress_request_body_level,json=compressRequestBodyLevel,proto3" json:"compress_request_body_level,omitempty"`
	PoolCompressor           bool                   `protobuf:"varint,42,opt,name=pool_compressor,json=poolCompressor,proto3" json:"pool_compressor,omitempty"`
	DiscoverNodesOnStart     bool                   `protobuf:"varint,50,opt,name=discover_nodes_on_start,json=discoverNodesOnStart,proto3" json:"discover_nodes_on_start,omitempty"`
	DiscoverNodesInterval    *durationpb.Duration   `protobuf:"bytes,51,opt,name=discover_nodes_interval,json=discoverNodesInterval,proto3" json:"discover_nodes_interval,omitempty"`
	EnableMetrics            bool                   `protobuf:"varint,60,opt,name=enable_metrics,json=enableMetrics,proto3" json:"enable_metrics,omitempty"`
	EnableDebugLogger        bool                   `protobuf:"varint,61,opt,name=enable_debug_logger,json=enableDebugLogger,proto3" json:"enable_debug_logger,omitempty"`
	EnableCompatibilityMode  bool                   `protobuf:"varint,62,opt,name=enable_compatibility_mode,json=enableCompatibilityMode,proto3" json:"enable_compatibility_mode,omitempty"`
	DisableMetaHeader        bool                   `protobuf:"varint,63,opt,name=disable_meta_header,json=disableMetaHeader,proto3" json:"disable_meta_header,omitempty"`
	Tls                      *TLS                   `protobuf:"bytes,70,opt,name=tls,proto3" json:"tls,omitempty"` // TLS配置
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Data_ElasticSearch) Reset() {
	*x = Data_ElasticSearch{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_ElasticSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_ElasticSearch) ProtoMessage() {}

func (x *Data_ElasticSearch) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_ElasticSearch.ProtoReflect.Descriptor instead.
func (*Data_ElasticSearch) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Data_ElasticSearch) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Data_ElasticSearch) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Data_ElasticSearch) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Data_ElasticSearch) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *Data_ElasticSearch) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *Data_ElasticSearch) GetServiceToken() string {
	if x != nil {
		return x.ServiceToken
	}
	return ""
}

func (x *Data_ElasticSearch) GetCertificateFingerprint() string {
	if x != nil {
		return x.CertificateFingerprint
	}
	return ""
}

func (x *Data_ElasticSearch) GetDisableRetry() bool {
	if x != nil {
		return x.DisableRetry
	}
	return false
}

func (x *Data_ElasticSearch) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *Data_ElasticSearch) GetCompressRequestBody() bool {
	if x != nil {
		return x.CompressRequestBody
	}
	return false
}

func (x *Data_ElasticSearch) GetCompressRequestBodyLevel() int32 {
	if x != nil {
		return x.CompressRequestBodyLevel
	}
	return 0
}

func (x *Data_ElasticSearch) GetPoolCompressor() bool {
	if x != nil {
		return x.PoolCompressor
	}
	return false
}

func (x *Data_ElasticSearch) GetDiscoverNodesOnStart() bool {
	if x != nil {
		return x.DiscoverNodesOnStart
	}
	return false
}

func (x *Data_ElasticSearch) GetDiscoverNodesInterval() *durationpb.Duration {
	if x != nil {
		return x.DiscoverNodesInterval
	}
	return nil
}

func (x *Data_ElasticSearch) GetEnableMetrics() bool {
	if x != nil {
		return x.EnableMetrics
	}
	return false
}

func (x *Data_ElasticSearch) GetEnableDebugLogger() bool {
	if x != nil {
		return x.EnableDebugLogger
	}
	return false
}

func (x *Data_ElasticSearch) GetEnableCompatibilityMode() bool {
	if x != nil {
		return x.EnableCompatibilityMode
	}
	return false
}

func (x *Data_ElasticSearch) GetDisableMetaHeader() bool {
	if x != nil {
		return x.DisableMetaHeader
	}
	return false
}

func (x *Data_ElasticSearch) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Data_Cassandra struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Address                  string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Username                 string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password                 string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Keyspace                 string                 `protobuf:"bytes,5,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	ConnectTimeout           *durationpb.Duration   `protobuf:"bytes,6,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	Timeout                  *durationpb.Duration   `protobuf:"bytes,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Consistency              uint32                 `protobuf:"varint,8,opt,name=consistency,proto3" json:"consistency,omitempty"`
	DisableInitialHostLookup bool                   `protobuf:"varint,9,opt,name=disable_initial_host_lookup,json=disableInitialHostLookup,proto3" json:"disable_initial_host_lookup,omitempty"`
	IgnorePeerAddr           bool                   `protobuf:"varint,10,opt,name=ignore_peer_addr,json=ignorePeerAddr,proto3" json:"ignore_peer_addr,omitempty"`
	Tls                      *TLS                   `protobuf:"bytes,11,opt,name=tls,proto3" json:"tls,omitempty"` // TLS配置
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Data_Cassandra) Reset() {
	*x = Data_Cassandra{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Cassandra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Cassandra) ProtoMessage() {}

func (x *Data_Cassandra) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Cassandra.ProtoReflect.Descriptor instead.
func (*Data_Cassandra) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Data_Cassandra) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Data_Cassandra) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Data_Cassandra) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Data_Cassandra) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *Data_Cassandra) GetConnectTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectTimeout
	}
	return nil
}

func (x *Data_Cassandra) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Data_Cassandra) GetConsistency() uint32 {
	if x != nil {
		return x.Consistency
	}
	return 0
}

func (x *Data_Cassandra) GetDisableInitialHostLookup() bool {
	if x != nil {
		return x.DisableInitialHostLookup
	}
	return false
}

func (x *Data_Cassandra) GetIgnorePeerAddr() bool {
	if x != nil {
		return x.IgnorePeerAddr
	}
	return false
}

func (x *Data_Cassandra) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Data_Snowflake struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Snowflake) Reset() {
	*x = Data_Snowflake{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Snowflake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Snowflake) ProtoMessage() {}

func (x *Data_Snowflake) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Snowflake.ProtoReflect.Descriptor instead.
func (*Data_Snowflake) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 8}
}

// Kafka
type Data_Kafka struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Endpoints              []string               `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"`                                                              // 对端网络地址
	Codec                  string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`                                                                      // 编解码器
	Async                  bool                   `protobuf:"varint,3,opt,name=async,proto3" json:"async,omitempty"`                                                                     // 异步发送
	AllowAutoTopicCreation bool                   `protobuf:"varint,4,opt,name=allow_auto_topic_creation,json=allowAutoTopicCreation,proto3" json:"allow_auto_topic_creation,omitempty"` // 允许发送的时候自动创建主题
	BatchSize              int32                  `protobuf:"varint,5,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`                                            // 批量发送量
	BatchBytes             int64                  `protobuf:"varint,6,opt,name=batch_bytes,json=batchBytes,proto3" json:"batch_bytes,omitempty"`                                         // 批量发送字节数
	BatchTimeout           *durationpb.Duration   `protobuf:"bytes,7,opt,name=batch_timeout,json=batchTimeout,proto3" json:"batch_timeout,omitempty"`                                    // 批量发送超时时间
	ReadTimeout            *durationpb.Duration   `protobuf:"bytes,8,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`                                       // 读取超时时间
	WriteTimeout           *durationpb.Duration   `protobuf:"bytes,9,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`                                    // 发送超时时间
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Data_Kafka) Reset() {
	*x = Data_Kafka{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Kafka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Kafka) ProtoMessage() {}

func (x *Data_Kafka) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Kafka.ProtoReflect.Descriptor instead.
func (*Data_Kafka) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 9}
}

func (x *Data_Kafka) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Data_Kafka) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Data_Kafka) GetAsync() bool {
	if x != nil {
		return x.Async
	}
	return false
}

func (x *Data_Kafka) GetAllowAutoTopicCreation() bool {
	if x != nil {
		return x.AllowAutoTopicCreation
	}
	return false
}

func (x *Data_Kafka) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *Data_Kafka) GetBatchBytes() int64 {
	if x != nil {
		return x.BatchBytes
	}
	return 0
}

func (x *Data_Kafka) GetBatchTimeout() *durationpb.Duration {
	if x != nil {
		return x.BatchTimeout
	}
	return nil
}

func (x *Data_Kafka) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *Data_Kafka) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

// RabbitMQ
type Data_RabbitMQ struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoints     []string               `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"` // 对端网络地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_RabbitMQ) Reset() {
	*x = Data_RabbitMQ{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_RabbitMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_RabbitMQ) ProtoMessage() {}

func (x *Data_RabbitMQ) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_RabbitMQ.ProtoReflect.Descriptor instead.
func (*Data_RabbitMQ) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 10}
}

func (x *Data_RabbitMQ) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

// MQTT
type Data_Mqtt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // 编解码器: json,xml,yaml...
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Mqtt) Reset() {
	*x = Data_Mqtt{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Mqtt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Mqtt) ProtoMessage() {}

func (x *Data_Mqtt) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Mqtt.ProtoReflect.Descriptor instead.
func (*Data_Mqtt) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 11}
}

func (x *Data_Mqtt) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Data_Mqtt) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

type Data_ActiveMQ struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // 编解码器: json,xml,yaml...
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_ActiveMQ) Reset() {
	*x = Data_ActiveMQ{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_ActiveMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_ActiveMQ) ProtoMessage() {}

func (x *Data_ActiveMQ) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_ActiveMQ.ProtoReflect.Descriptor instead.
func (*Data_ActiveMQ) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 12}
}

func (x *Data_ActiveMQ) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Data_ActiveMQ) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

type Data_NATS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // 编解码器: json,xml,yaml...
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_NATS) Reset() {
	*x = Data_NATS{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_NATS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_NATS) ProtoMessage() {}

func (x *Data_NATS) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_NATS.ProtoReflect.Descriptor instead.
func (*Data_NATS) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 13}
}

func (x *Data_NATS) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Data_NATS) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

type Data_NSQ struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // 编解码器: json,xml,yaml...
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_NSQ) Reset() {
	*x = Data_NSQ{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_NSQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_NSQ) ProtoMessage() {}

func (x *Data_NSQ) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_NSQ.ProtoReflect.Descriptor instead.
func (*Data_NSQ) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 14}
}

func (x *Data_NSQ) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Data_NSQ) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

type Data_Pulsar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // 编解码器: json,xml,yaml...
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Pulsar) Reset() {
	*x = Data_Pulsar{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Pulsar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Pulsar) ProtoMessage() {}

func (x *Data_Pulsar) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Pulsar.ProtoReflect.Descriptor instead.
func (*Data_Pulsar) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 15}
}

func (x *Data_Pulsar) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Data_Pulsar) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

type Data_RocketMQ struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Version          string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // 驱动版本：aliyun、v2、v5
	Codec            string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`     // 编解码器: json,xml,yaml...
	EnableTrace      bool                   `protobuf:"varint,3,opt,name=enable_trace,json=enableTrace,proto3" json:"enable_trace,omitempty"`
	NameServers      []string               `protobuf:"bytes,4,rep,name=name_servers,json=nameServers,proto3" json:"name_servers,omitempty"`
	NameServerDomain string                 `protobuf:"bytes,5,opt,name=name_server_domain,json=nameServerDomain,proto3" json:"name_server_domain,omitempty"`
	AccessKey        string                 `protobuf:"bytes,6,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey        string                 `protobuf:"bytes,7,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SecurityToken    string                 `protobuf:"bytes,8,opt,name=security_token,json=securityToken,proto3" json:"security_token,omitempty"`
	Namespace        string                 `protobuf:"bytes,9,opt,name=namespace,proto3" json:"namespace,omitempty"`
	InstanceName     string                 `protobuf:"bytes,10,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	GroupName        string                 `protobuf:"bytes,11,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Data_RocketMQ) Reset() {
	*x = Data_RocketMQ{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_RocketMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_RocketMQ) ProtoMessage() {}

func (x *Data_RocketMQ) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_RocketMQ.ProtoReflect.Descriptor instead.
func (*Data_RocketMQ) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 16}
}

func (x *Data_RocketMQ) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Data_RocketMQ) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Data_RocketMQ) GetEnableTrace() bool {
	if x != nil {
		return x.EnableTrace
	}
	return false
}

func (x *Data_RocketMQ) GetNameServers() []string {
	if x != nil {
		return x.NameServers
	}
	return nil
}

func (x *Data_RocketMQ) GetNameServerDomain() string {
	if x != nil {
		return x.NameServerDomain
	}
	return ""
}

func (x *Data_RocketMQ) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *Data_RocketMQ) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *Data_RocketMQ) GetSecurityToken() string {
	if x != nil {
		return x.SecurityToken
	}
	return ""
}

func (x *Data_RocketMQ) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Data_RocketMQ) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *Data_RocketMQ) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

var File_conf_v1_kratos_conf_data_proto protoreflect.FileDescriptor

const file_conf_v1_kratos_conf_data_proto_rawDesc = "" +
	"\n" +
	"\x1econf/v1/kratos_conf_data.proto\x12\x04conf\x1a\x1egoogle/protobuf/duration.proto\x1a\x1dconf/v1/kratos_conf_tls.proto\"\xc75\n" +
	"\x04Data\x124\n" +
	"\bdatabase\x18\x01 \x01(\v2\x13.conf.Data.DatabaseH\x00R\bdatabase\x88\x01\x01\x12+\n" +
	"\x05redis\x18\n" +
	" \x01(\v2\x10.conf.Data.RedisH\x01R\x05redis\x88\x01\x01\x121\n" +
	"\amongodb\x18\v \x01(\v2\x12.conf.Data.MongoDBH\x02R\amongodb\x88\x01\x01\x12D\n" +
	"\x0eelastic_search\x18\f \x01(\v2\x18.conf.Data.ElasticSearchH\x03R\relasticSearch\x88\x01\x01\x127\n" +
	"\tcassandra\x18\r \x01(\v2\x14.conf.Data.CassandraH\x04R\tcassandra\x88\x01\x01\x12:\n" +
	"\n" +
	"clickhouse\x18\x14 \x01(\v2\x15.conf.Data.ClickHouseH\x05R\n" +
	"clickhouse\x88\x01\x01\x124\n" +
	"\binfluxdb\x18\x15 \x01(\v2\x13.conf.Data.InfluxDBH\x06R\binfluxdb\x88\x01\x01\x12+\n" +
	"\x05doris\x18\x16 \x01(\v2\x10.conf.Data.DorisH\aR\x05doris\x88\x01\x01\x12+\n" +
	"\x05kafka\x18\x1e \x01(\v2\x10.conf.Data.KafkaH\bR\x05kafka\x88\x01\x01\x124\n" +
	"\brabbitmq\x18\x1f \x01(\v2\x13.conf.Data.RabbitMQH\tR\brabbitmq\x88\x01\x01\x12(\n" +
	"\x04mqtt\x18  \x01(\v2\x0f.conf.Data.MqttH\n" +
	"R\x04mqtt\x88\x01\x01\x124\n" +
	"\bactivemq\x18! \x01(\v2\x13.conf.Data.ActiveMQH\vR\bactivemq\x88\x01\x01\x12(\n" +
	"\x04nats\x18\" \x01(\v2\x0f.conf.Data.NATSH\fR\x04nats\x88\x01\x01\x12%\n" +
	"\x03nsq\x18# \x01(\v2\x0e.conf.Data.NSQH\rR\x03nsq\x88\x01\x01\x12.\n" +
	"\x06pulsar\x18$ \x01(\v2\x11.conf.Data.PulsarH\x0eR\x06pulsar\x88\x01\x01\x124\n" +
	"\brocketmq\x18& \x01(\v2\x13.conf.Data.RocketMQH\x0fR\brocketmq\x88\x01\x01\x1a\xb2\x05\n" +
	"\bDatabase\x12\x16\n" +
	"\x06driver\x18\x01 \x01(\tR\x06driver\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x12\x18\n" +
	"\amigrate\x18\n" +
	" \x01(\bR\amigrate\x12\x14\n" +
	"\x05debug\x18\v \x01(\bR\x05debug\x12!\n" +
	"\fenable_trace\x18\f \x01(\bR\venableTrace\x12%\n" +
	"\x0eenable_metrics\x18\r \x01(\bR\renableMetrics\x125\n" +
	"\x14max_idle_connections\x18\x14 \x01(\x05H\x00R\x12maxIdleConnections\x88\x01\x01\x125\n" +
	"\x14max_open_connections\x18\x15 \x01(\x05H\x01R\x12maxOpenConnections\x88\x01\x01\x12V\n" +
	"\x17connection_max_lifetime\x18\x16 \x01(\v2\x19.google.protobuf.DurationH\x02R\x15connectionMaxLifetime\x88\x01\x01\x125\n" +
	"\x14prometheus_push_addr\x18\x1e \x01(\tH\x03R\x12prometheusPushAddr\x88\x01\x01\x121\n" +
	"\x12prometheus_db_name\x18\x1f \x01(\tH\x04R\x10prometheusDbName\x88\x01\x01\x125\n" +
	"\x14prometheus_http_port\x18  \x01(\rH\x05R\x12prometheusHttpPort\x88\x01\x01B\x17\n" +
	"\x15_max_idle_connectionsB\x17\n" +
	"\x15_max_open_connectionsB\x1a\n" +
	"\x18_connection_max_lifetimeB\x17\n" +
	"\x15_prometheus_push_addrB\x15\n" +
	"\x13_prometheus_db_nameB\x17\n" +
	"\x15_prometheus_http_port\x1a\xec\x02\n" +
	"\x05Redis\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x12\x1a\n" +
	"\bpassword\x18\x03 \x01(\tR\bpassword\x12\x0e\n" +
	"\x02db\x18\x04 \x01(\x05R\x02db\x12<\n" +
	"\fdial_timeout\x182 \x01(\v2\x19.google.protobuf.DurationR\vdialTimeout\x12<\n" +
	"\fread_timeout\x183 \x01(\v2\x19.google.protobuf.DurationR\vreadTimeout\x12>\n" +
	"\rwrite_timeout\x184 \x01(\v2\x19.google.protobuf.DurationR\fwriteTimeout\x12%\n" +
	"\x0eenable_tracing\x18d \x01(\bR\renableTracing\x12&\n" +
	"\x0eenable_metrics\x18\xe9\a \x01(\bR\renableMetrics\x1a\xc7\b\n" +
	"\aMongoDB\x12\x10\n" +
	"\x03uri\x18\x01 \x01(\tR\x03uri\x12\x1f\n" +
	"\bdatabase\x18\x02 \x01(\tH\x00R\bdatabase\x88\x01\x01\x12\x1f\n" +
	"\busername\x18\n" +
	" \x01(\tH\x01R\busername\x88\x01\x01\x12\x1f\n" +
	"\bpassword\x18\v \x01(\tH\x02R\bpassword\x88\x01\x01\x12*\n" +
	"\x0eauth_mechanism\x18\x14 \x01(\tH\x03R\rauthMechanism\x88\x01\x01\x12k\n" +
	"\x19auth_mechanism_properties\x18\x15 \x03(\v2/.conf.Data.MongoDB.AuthMechanismPropertiesEntryR\x17authMechanismProperties\x12$\n" +
	"\vauth_source\x18\x16 \x01(\tH\x04R\n" +
	"authSource\x88\x01\x01\x12B\n" +
	"\x0fconnect_timeout\x182 \x01(\v2\x19.google.protobuf.DurationR\x0econnectTimeout\x12H\n" +
	"\x12heartbeat_interval\x183 \x01(\v2\x19.google.protobuf.DurationR\x11heartbeatInterval\x12B\n" +
	"\x0flocal_threshold\x184 \x01(\v2\x19.google.protobuf.DurationR\x0elocalThreshold\x12F\n" +
	"\x12max_conn_idle_time\x185 \x01(\v2\x19.google.protobuf.DurationR\x0fmaxConnIdleTime\x12>\n" +
	"\rmax_staleness\x186 \x01(\v2\x19.google.protobuf.DurationR\fmaxStaleness\x12S\n" +
	"\x18server_selection_timeout\x187 \x01(\v2\x19.google.protobuf.DurationR\x16serverSelectionTimeout\x12@\n" +
	"\x0esocket_timeout\x188 \x01(\v2\x19.google.protobuf.DurationR\rsocketTimeout\x123\n" +
	"\atimeout\x189 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12%\n" +
	"\x0eenable_tracing\x18d \x01(\bR\renableTracing\x12%\n" +
	"\x0eenable_metrics\x18e \x01(\bR\renableMetrics\x1aJ\n" +
	"\x1cAuthMechanismPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\v\n" +
	"\t_databaseB\v\n" +
	"\t_usernameB\v\n" +
	"\t_passwordB\x11\n" +
	"\x0f_auth_mechanismB\x0e\n" +
	"\f_auth_source\x1a\x91\a\n" +
	"\n" +
	"ClickHouse\x12\x1c\n" +
	"\taddresses\x18\x01 \x03(\tR\taddresses\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\x1a\n" +
	"\busername\x18\x03 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\x12\x14\n" +
	"\x05debug\x18\x05 \x01(\bR\x05debug\x12\x1a\n" +
	"\bprotocol\x18\x06 \x01(\tR\bprotocol\x12\x1b\n" +
	"\x03tls\x18\a \x01(\v2\t.conf.TLSR\x03tls\x12-\n" +
	"\x12compression_method\x18\n" +
	" \x01(\tR\x11compressionMethod\x12,\n" +
	"\x12conn_open_strategy\x18\v \x01(\tR\x10connOpenStrategy\x12<\n" +
	"\fdial_timeout\x18\x14 \x01(\v2\x19.google.protobuf.DurationR\vdialTimeout\x12F\n" +
	"\x12conn_max_life_time\x18\x15 \x01(\v2\x19.google.protobuf.DurationR\x0fconnMaxLifeTime\x12Q\n" +
	"\x17connection_max_lifetime\x18\x16 \x01(\v2\x19.google.protobuf.DurationR\x15connectionMaxLifetime\x12,\n" +
	"\x12max_execution_time\x18\x17 \x01(\x05R\x10maxExecutionTime\x12$\n" +
	"\x0emax_open_conns\x18\x1e \x01(\x05R\fmaxOpenConns\x12$\n" +
	"\x0emax_idle_conns\x18\x1f \x01(\x05R\fmaxIdleConns\x120\n" +
	"\x14max_idle_connections\x18  \x01(\x05R\x12maxIdleConnections\x120\n" +
	"\x14max_open_connections\x18! \x01(\x05R\x12maxOpenConnections\x12*\n" +
	"\x11block_buffer_size\x18( \x01(\x05R\x0fblockBufferSize\x124\n" +
	"\x16max_compression_buffer\x18) \x01(\x05R\x14maxCompressionBuffer\x12%\n" +
	"\x0eenable_tracing\x18d \x01(\bR\renableTracing\x12%\n" +
	"\x0eenable_metrics\x18e \x01(\bR\renableMetrics\x1a\xe5\x02\n" +
	"\bInfluxDB\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x14\n" +
	"\x05token\x18\x02 \x01(\tR\x05token\x12\x1f\n" +
	"\vauth_scheme\x18\x03 \x01(\tR\n" +
	"authScheme\x12\x14\n" +
	"\x05proxy\x18\x04 \x01(\tR\x05proxy\x12\"\n" +
	"\forganization\x18\n" +
	" \x01(\tR\forganization\x12\x1a\n" +
	"\bdatabase\x18\v \x01(\tR\bdatabase\x123\n" +
	"\atimeout\x18\x14 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12Q\n" +
	"\x17idle_connection_timeout\x18\x15 \x01(\v2\x19.google.protobuf.DurationR\x15idleConnectionTimeout\x120\n" +
	"\x14max_idle_connections\x18\x16 \x01(\x05R\x12maxIdleConnections\x1a!\n" +
	"\x05Doris\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x1a\xc3\x06\n" +
	"\rElasticSearch\x12\x1c\n" +
	"\taddresses\x18\x01 \x03(\tR\taddresses\x12\x1a\n" +
	"\busername\x18\n" +
	" \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\v \x01(\tR\bpassword\x12\x19\n" +
	"\bcloud_id\x18\x14 \x01(\tR\acloudId\x12\x17\n" +
	"\aapi_key\x18\x15 \x01(\tR\x06apiKey\x12#\n" +
	"\rservice_token\x18\x16 \x01(\tR\fserviceToken\x127\n" +
	"\x17certificate_fingerprint\x18\x17 \x01(\tR\x16certificateFingerprint\x12#\n" +
	"\rdisable_retry\x18\x1e \x01(\bR\fdisableRetry\x12\x1f\n" +
	"\vmax_retries\x18\x1f \x01(\x05R\n" +
	"maxRetries\x122\n" +
	"\x15compress_request_body\x18( \x01(\bR\x13compressRequestBody\x12=\n" +
	"\x1bcompress_request_body_level\x18) \x01(\x05R\x18compressRequestBodyLevel\x12'\n" +
	"\x0fpool_compressor\x18* \x01(\bR\x0epoolCompressor\x125\n" +
	"\x17discover_nodes_on_start\x182 \x01(\bR\x14discoverNodesOnStart\x12Q\n" +
	"\x17discover_nodes_interval\x183 \x01(\v2\x19.google.protobuf.DurationR\x15discoverNodesInterval\x12%\n" +
	"\x0eenable_metrics\x18< \x01(\bR\renableMetrics\x12.\n" +
	"\x13enable_debug_logger\x18= \x01(\bR\x11enableDebugLogger\x12:\n" +
	"\x19enable_compatibility_mode\x18> \x01(\bR\x17enableCompatibilityMode\x12.\n" +
	"\x13disable_meta_header\x18? \x01(\bR\x11disableMetaHeader\x12\x1b\n" +
	"\x03tls\x18F \x01(\v2\t.conf.TLSR\x03tls\x1a\x9a\x03\n" +
	"\tCassandra\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x03 \x01(\tR\bpassword\x12\x1a\n" +
	"\bkeyspace\x18\x05 \x01(\tR\bkeyspace\x12B\n" +
	"\x0fconnect_timeout\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\x0econnectTimeout\x123\n" +
	"\atimeout\x18\a \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12 \n" +
	"\vconsistency\x18\b \x01(\rR\vconsistency\x12=\n" +
	"\x1bdisable_initial_host_lookup\x18\t \x01(\bR\x18disableInitialHostLookup\x12(\n" +
	"\x10ignore_peer_addr\x18\n" +
	" \x01(\bR\x0eignorePeerAddr\x12\x1b\n" +
	"\x03tls\x18\v \x01(\v2\t.conf.TLSR\x03tls\x1a\v\n" +
	"\tSnowflake\x1a\x8a\x03\n" +
	"\x05Kafka\x12\x1c\n" +
	"\tendpoints\x18\x01 \x03(\tR\tendpoints\x12\x14\n" +
	"\x05codec\x18\x02 \x01(\tR\x05codec\x12\x14\n" +
	"\x05async\x18\x03 \x01(\bR\x05async\x129\n" +
	"\x19allow_auto_topic_creation\x18\x04 \x01(\bR\x16allowAutoTopicCreation\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x05 \x01(\x05R\tbatchSize\x12\x1f\n" +
	"\vbatch_bytes\x18\x06 \x01(\x03R\n" +
	"batchBytes\x12>\n" +
	"\rbatch_timeout\x18\a \x01(\v2\x19.google.protobuf.DurationR\fbatchTimeout\x12<\n" +
	"\fread_timeout\x18\b \x01(\v2\x19.google.protobuf.DurationR\vreadTimeout\x12>\n" +
	"\rwrite_timeout\x18\t \x01(\v2\x19.google.protobuf.DurationR\fwriteTimeout\x1a(\n" +
	"\bRabbitMQ\x12\x1c\n" +
	"\tendpoints\x18\x01 \x03(\tR\tendpoints\x1a8\n" +
	"\x04Mqtt\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x14\n" +
	"\x05codec\x18\x02 \x01(\tR\x05codec\x1a<\n" +
	"\bActiveMQ\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x14\n" +
	"\x05codec\x18\x02 \x01(\tR\x05codec\x1a8\n" +
	"\x04NATS\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x14\n" +
	"\x05codec\x18\x02 \x01(\tR\x05codec\x1a7\n" +
	"\x03NSQ\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x14\n" +
	"\x05codec\x18\x02 \x01(\tR\x05codec\x1a:\n" +
	"\x06Pulsar\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x14\n" +
	"\x05codec\x18\x02 \x01(\tR\x05codec\x1a\xf5\x02\n" +
	"\bRocketMQ\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12\x14\n" +
	"\x05codec\x18\x02 \x01(\tR\x05codec\x12!\n" +
	"\fenable_trace\x18\x03 \x01(\bR\venableTrace\x12!\n" +
	"\fname_servers\x18\x04 \x03(\tR\vnameServers\x12,\n" +
	"\x12name_server_domain\x18\x05 \x01(\tR\x10nameServerDomain\x12\x1d\n" +
	"\n" +
	"access_key\x18\x06 \x01(\tR\taccessKey\x12\x1d\n" +
	"\n" +
	"secret_key\x18\a \x01(\tR\tsecretKey\x12%\n" +
	"\x0esecurity_token\x18\b \x01(\tR\rsecurityToken\x12\x1c\n" +
	"\tnamespace\x18\t \x01(\tR\tnamespace\x12#\n" +
	"\rinstance_name\x18\n" +
	" \x01(\tR\finstanceName\x12\x1d\n" +
	"\n" +
	"group_name\x18\v \x01(\tR\tgroupNameB\v\n" +
	"\t_databaseB\b\n" +
	"\x06_redisB\n" +
	"\n" +
	"\b_mongodbB\x11\n" +
	"\x0f_elastic_searchB\f\n" +
	"\n" +
	"_cassandraB\r\n" +
	"\v_clickhouseB\v\n" +
	"\t_influxdbB\b\n" +
	"\x06_dorisB\b\n" +
	"\x06_kafkaB\v\n" +
	"\t_rabbitmqB\a\n" +
	"\x05_mqttB\v\n" +
	"\t_activemqB\a\n" +
	"\x05_natsB\x06\n" +
	"\x04_nsqB\t\n" +
	"\a_pulsarB\v\n" +
	"\t_rocketmqB\x85\x01\n" +
	"\bcom.confB\x13KratosConfDataProtoP\x01Z4github.com/tx7do/kratos-bootstrap/api/gen/go/conf/v1\xa2\x02\x03CXX\xaa\x02\x04Conf\xca\x02\x04Conf\xe2\x02\x10Conf\\GPBMetadata\xea\x02\x04Confb\x06proto3"

var (
	file_conf_v1_kratos_conf_data_proto_rawDescOnce sync.Once
	file_conf_v1_kratos_conf_data_proto_rawDescData []byte
)

func file_conf_v1_kratos_conf_data_proto_rawDescGZIP() []byte {
	file_conf_v1_kratos_conf_data_proto_rawDescOnce.Do(func() {
		file_conf_v1_kratos_conf_data_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_conf_v1_kratos_conf_data_proto_rawDesc), len(file_conf_v1_kratos_conf_data_proto_rawDesc)))
	})
	return file_conf_v1_kratos_conf_data_proto_rawDescData
}

var file_conf_v1_kratos_conf_data_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_conf_v1_kratos_conf_data_proto_goTypes = []any{
	(*Data)(nil),                // 0: conf.Data
	(*Data_Database)(nil),       // 1: conf.Data.Database
	(*Data_Redis)(nil),          // 2: conf.Data.Redis
	(*Data_MongoDB)(nil),        // 3: conf.Data.MongoDB
	(*Data_ClickHouse)(nil),     // 4: conf.Data.ClickHouse
	(*Data_InfluxDB)(nil),       // 5: conf.Data.InfluxDB
	(*Data_Doris)(nil),          // 6: conf.Data.Doris
	(*Data_ElasticSearch)(nil),  // 7: conf.Data.ElasticSearch
	(*Data_Cassandra)(nil),      // 8: conf.Data.Cassandra
	(*Data_Snowflake)(nil),      // 9: conf.Data.Snowflake
	(*Data_Kafka)(nil),          // 10: conf.Data.Kafka
	(*Data_RabbitMQ)(nil),       // 11: conf.Data.RabbitMQ
	(*Data_Mqtt)(nil),           // 12: conf.Data.Mqtt
	(*Data_ActiveMQ)(nil),       // 13: conf.Data.ActiveMQ
	(*Data_NATS)(nil),           // 14: conf.Data.NATS
	(*Data_NSQ)(nil),            // 15: conf.Data.NSQ
	(*Data_Pulsar)(nil),         // 16: conf.Data.Pulsar
	(*Data_RocketMQ)(nil),       // 17: conf.Data.RocketMQ
	nil,                         // 18: conf.Data.MongoDB.AuthMechanismPropertiesEntry
	(*durationpb.Duration)(nil), // 19: google.protobuf.Duration
	(*TLS)(nil),                 // 20: conf.TLS
}
var file_conf_v1_kratos_conf_data_proto_depIdxs = []int32{
	1,  // 0: conf.Data.database:type_name -> conf.Data.Database
	2,  // 1: conf.Data.redis:type_name -> conf.Data.Redis
	3,  // 2: conf.Data.mongodb:type_name -> conf.Data.MongoDB
	7,  // 3: conf.Data.elastic_search:type_name -> conf.Data.ElasticSearch
	8,  // 4: conf.Data.cassandra:type_name -> conf.Data.Cassandra
	4,  // 5: conf.Data.clickhouse:type_name -> conf.Data.ClickHouse
	5,  // 6: conf.Data.influxdb:type_name -> conf.Data.InfluxDB
	6,  // 7: conf.Data.doris:type_name -> conf.Data.Doris
	10, // 8: conf.Data.kafka:type_name -> conf.Data.Kafka
	11, // 9: conf.Data.rabbitmq:type_name -> conf.Data.RabbitMQ
	12, // 10: conf.Data.mqtt:type_name -> conf.Data.Mqtt
	13, // 11: conf.Data.activemq:type_name -> conf.Data.ActiveMQ
	14, // 12: conf.Data.nats:type_name -> conf.Data.NATS
	15, // 13: conf.Data.nsq:type_name -> conf.Data.NSQ
	16, // 14: conf.Data.pulsar:type_name -> conf.Data.Pulsar
	17, // 15: conf.Data.rocketmq:type_name -> conf.Data.RocketMQ
	19, // 16: conf.Data.Database.connection_max_lifetime:type_name -> google.protobuf.Duration
	19, // 17: conf.Data.Redis.dial_timeout:type_name -> google.protobuf.Duration
	19, // 18: conf.Data.Redis.read_timeout:type_name -> google.protobuf.Duration
	19, // 19: conf.Data.Redis.write_timeout:type_name -> google.protobuf.Duration
	18, // 20: conf.Data.MongoDB.auth_mechanism_properties:type_name -> conf.Data.MongoDB.AuthMechanismPropertiesEntry
	19, // 21: conf.Data.MongoDB.connect_timeout:type_name -> google.protobuf.Duration
	19, // 22: conf.Data.MongoDB.heartbeat_interval:type_name -> google.protobuf.Duration
	19, // 23: conf.Data.MongoDB.local_threshold:type_name -> google.protobuf.Duration
	19, // 24: conf.Data.MongoDB.max_conn_idle_time:type_name -> google.protobuf.Duration
	19, // 25: conf.Data.MongoDB.max_staleness:type_name -> google.protobuf.Duration
	19, // 26: conf.Data.MongoDB.server_selection_timeout:type_name -> google.protobuf.Duration
	19, // 27: conf.Data.MongoDB.socket_timeout:type_name -> google.protobuf.Duration
	19, // 28: conf.Data.MongoDB.timeout:type_name -> google.protobuf.Duration
	20, // 29: conf.Data.ClickHouse.tls:type_name -> conf.TLS
	19, // 30: conf.Data.ClickHouse.dial_timeout:type_name -> google.protobuf.Duration
	19, // 31: conf.Data.ClickHouse.conn_max_life_time:type_name -> google.protobuf.Duration
	19, // 32: conf.Data.ClickHouse.connection_max_lifetime:type_name -> google.protobuf.Duration
	19, // 33: conf.Data.InfluxDB.timeout:type_name -> google.protobuf.Duration
	19, // 34: conf.Data.InfluxDB.idle_connection_timeout:type_name -> google.protobuf.Duration
	19, // 35: conf.Data.ElasticSearch.discover_nodes_interval:type_name -> google.protobuf.Duration
	20, // 36: conf.Data.ElasticSearch.tls:type_name -> conf.TLS
	19, // 37: conf.Data.Cassandra.connect_timeout:type_name -> google.protobuf.Duration
	19, // 38: conf.Data.Cassandra.timeout:type_name -> google.protobuf.Duration
	20, // 39: conf.Data.Cassandra.tls:type_name -> conf.TLS
	19, // 40: conf.Data.Kafka.batch_timeout:type_name -> google.protobuf.Duration
	19, // 41: conf.Data.Kafka.read_timeout:type_name -> google.protobuf.Duration
	19, // 42: conf.Data.Kafka.write_timeout:type_name -> google.protobuf.Duration
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_conf_v1_kratos_conf_data_proto_init() }
func file_conf_v1_kratos_conf_data_proto_init() {
	if File_conf_v1_kratos_conf_data_proto != nil {
		return
	}
	file_conf_v1_kratos_conf_tls_proto_init()
	file_conf_v1_kratos_conf_data_proto_msgTypes[0].OneofWrappers = []any{}
	file_conf_v1_kratos_conf_data_proto_msgTypes[1].OneofWrappers = []any{}
	file_conf_v1_kratos_conf_data_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_conf_v1_kratos_conf_data_proto_rawDesc), len(file_conf_v1_kratos_conf_data_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_conf_v1_kratos_conf_data_proto_goTypes,
		DependencyIndexes: file_conf_v1_kratos_conf_data_proto_depIdxs,
		MessageInfos:      file_conf_v1_kratos_conf_data_proto_msgTypes,
	}.Build()
	File_conf_v1_kratos_conf_data_proto = out.File
	file_conf_v1_kratos_conf_data_proto_goTypes = nil
	file_conf_v1_kratos_conf_data_proto_depIdxs = nil
}
